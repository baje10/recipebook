[{"C:\\Users\\pillo\\recipebook\\src\\redux\\store.js":"1","C:\\Users\\pillo\\recipebook\\src\\pages\\about.js":"2","C:\\Users\\pillo\\recipebook\\src\\pages\\default.js":"3","C:\\Users\\pillo\\recipebook\\src\\pages\\signin.js":"4","C:\\Users\\pillo\\recipebook\\src\\pages\\recipeDetails.js":"5","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\userReducers.js":"6","C:\\Users\\pillo\\recipebook\\src\\redux\\combineActions.js":"7","C:\\Users\\pillo\\recipebook\\src\\redux\\types.js":"8","C:\\Users\\pillo\\recipebook\\src\\pages\\newRecipes.js":"9","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\recipe.js":"10","C:\\Users\\pillo\\recipebook\\src\\index.js":"11","C:\\Users\\pillo\\recipebook\\src\\adminPage\\adminPage.js":"12","C:\\Users\\pillo\\recipebook\\src\\pages\\allRecipe.js":"13","C:\\Users\\pillo\\recipebook\\src\\components\\navbar.js":"14","C:\\Users\\pillo\\recipebook\\src\\components\\footer.js":"15","C:\\Users\\pillo\\recipebook\\src\\components\\navbarLow.js":"16","C:\\Users\\pillo\\recipebook\\src\\pages\\signup.js":"17","C:\\Users\\pillo\\recipebook\\src\\pages\\mainHomepage.js":"18","C:\\Users\\pillo\\recipebook\\src\\routes\\privateRoute.js":"19","C:\\Users\\pillo\\recipebook\\src\\routes\\loggedInRoute.js":"20","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\recipeReducers.js":"21","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\categoryReducers.js":"22","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\category.js":"23","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\user.js":"24","C:\\Users\\pillo\\recipebook\\src\\App.js":"25","C:\\Users\\pillo\\recipebook\\src\\pages\\home.js":"26","C:\\Users\\pillo\\recipebook\\src\\pages\\categsHome.js":"27","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\index.js":"28","C:\\Users\\pillo\\recipebook\\src\\routes\\adminRoute.js":"29"},{"size":1456,"mtime":1613478352530,"results":"30","hashOfConfig":"31"},{"size":178,"mtime":1613840001209,"results":"32","hashOfConfig":"31"},{"size":412,"mtime":1611759582416,"results":"33","hashOfConfig":"31"},{"size":4886,"mtime":1612101784870,"results":"34","hashOfConfig":"31"},{"size":11040,"mtime":1616054313411,"results":"35","hashOfConfig":"31"},{"size":930,"mtime":1611759582422,"results":"36","hashOfConfig":"31"},{"size":58,"mtime":1611754583186,"results":"37","hashOfConfig":"31"},{"size":2340,"mtime":1613478352531,"results":"38","hashOfConfig":"31"},{"size":3485,"mtime":1616049998843,"results":"39","hashOfConfig":"31"},{"size":5156,"mtime":1616048314134,"results":"40","hashOfConfig":"31"},{"size":306,"mtime":1611754583186,"results":"41","hashOfConfig":"31"},{"size":49785,"mtime":1615704362883,"results":"42","hashOfConfig":"31"},{"size":6311,"mtime":1616049981394,"results":"43","hashOfConfig":"31"},{"size":3808,"mtime":1614086059439,"results":"44","hashOfConfig":"31"},{"size":158,"mtime":1611759582412,"results":"45","hashOfConfig":"31"},{"size":7230,"mtime":1616050043915,"results":"46","hashOfConfig":"31"},{"size":6441,"mtime":1612101784870,"results":"47","hashOfConfig":"31"},{"size":758,"mtime":1616002996345,"results":"48","hashOfConfig":"31"},{"size":773,"mtime":1611759582424,"results":"49","hashOfConfig":"31"},{"size":774,"mtime":1611759582424,"results":"50","hashOfConfig":"31"},{"size":3581,"mtime":1615702745321,"results":"51","hashOfConfig":"31"},{"size":923,"mtime":1615702743893,"results":"52","hashOfConfig":"31"},{"size":1245,"mtime":1615989574760,"results":"53","hashOfConfig":"31"},{"size":1437,"mtime":1615989636767,"results":"54","hashOfConfig":"31"},{"size":1489,"mtime":1616049955995,"results":"55","hashOfConfig":"31"},{"size":3240,"mtime":1616049991884,"results":"56","hashOfConfig":"31"},{"size":2910,"mtime":1616003734633,"results":"57","hashOfConfig":"31"},{"size":160,"mtime":1611754583186,"results":"58","hashOfConfig":"31"},{"size":706,"mtime":1611759582423,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1xgjjn2",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"67"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"C:\\Users\\pillo\\recipebook\\src\\redux\\store.js",[],["133","134"],"C:\\Users\\pillo\\recipebook\\src\\pages\\about.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\default.js",[],["135","136"],"C:\\Users\\pillo\\recipebook\\src\\pages\\signin.js",[],["137","138"],"C:\\Users\\pillo\\recipebook\\src\\pages\\recipeDetails.js",["139"],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\userReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\combineActions.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\types.js",[],["140","141"],"C:\\Users\\pillo\\recipebook\\src\\pages\\newRecipes.js",["142"],"import React, { useEffect } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: \"35rem\",\r\n    maxWidth: \"15rem\",\r\n    marginTop: '1rem',\r\n    marginLeft: '.7rem',\r\n    whiteSpace: 'nowrap'\r\n  },\r\n});\r\n\r\nconst NewRecipes = () => {\r\n  const { recipes, loading, error } = useSelector(state => state.recipeList);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(rbook.recipe.listRecipes());\r\n    return () => {\r\n    //\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    loading? <center className='loading' ><CircularProgress color = 'inherit' /></center> : error? <div>{error}</div> :\r\n    <>\r\n      <center style={{marginTop:\"2%\"}} className = 'welcomeTitle'>New recipes for you</center>\r\n      <div className = 'home-container'>\r\n      { recipes.length > 0 ? (\r\n        <>\r\n          {\r\n           recipes.map( recipes =>\r\n            <Card key={recipes.name} className={classes.root}>\r\n               <CardMedia\r\n                 component=\"img\"\r\n                 alt={recipes.name}\r\n                 height=\"250\"\r\n                 image={`/api/recipe/photo/${recipes._id}`}\r\n                 title={recipes.name}\r\n               />\r\n               <CardContent>\r\n                 <Typography gutterBottom variant=\"h6\">\r\n                   <Box\r\n                     component=\"div\"\r\n                     my={2}\r\n                     textOverflow=\"ellipsis\"\r\n                     overflow=\"hidden\"\r\n                   >\r\n                     {recipes.name}\r\n                   </Box>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <Rating precision={.2} readOnly value={recipes.rating.toFixed(1)}/> <div style = {{fontSize: \"1.5rem\"}}>{recipes.rating.toFixed(1)}</div>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <div style = {{fontSize: \"1rem\"}}>Number of reviews: {recipes.numReviews}</div>\r\n                 </Typography>\r\n               </CardContent>\r\n               <CardActions>\r\n                 <Link to = {`/detail/${recipes._id}`}>\r\n                   <Button size=\"small\" color=\"primary\">\r\n                     Read more\r\n                   </Button>\r\n                 </Link>\r\n               </CardActions>\r\n             </Card>\r\n            )\r\n           }\r\n         </>\r\n      ) : (\r\n        <div style = {{fontSize: '4rem'}} >No recipes found</div>\r\n      ) }\r\n      </div>\r\n      <center>\r\n        <Button style = {{marginTop:'3%'}} variant=\"contained\" color=\"primary\" href=\"/recipes\">\r\n          View All recipes\r\n        </Button>\r\n      </center>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewRecipes;\r\n","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\recipe.js",[],["143","144"],"C:\\Users\\pillo\\recipebook\\src\\index.js",[],["145","146"],"C:\\Users\\pillo\\recipebook\\src\\adminPage\\adminPage.js",["147","148","149"],"import React, { useEffect, useState, useCallback } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Input from '@material-ui/core/Input';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Select from '@material-ui/core/Select';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width:'58rem',\r\n  },\r\n  paper1: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width:'58rem',\r\n    height: \"100%\",\r\n    overflow: \"scroll\"\r\n  },\r\n  textField: {\r\n    marginTop: '3%',\r\n    marginBottom: '3%',\r\n    width: '100%',\r\n    '& label.Mui-focused': {\r\n      color: '#FF3F16',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#FF3F16',\r\n    },\r\n  },\r\n  table: {\r\n    minWidth: '100%',\r\n  },\r\n  paper2: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width:'65rem',\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst AdminPage = () => {\r\n  const [openModalCategory, setOpenModalCategory] = useState(false);\r\n  const [openModalRecipe, setOpenModalRecipe] = useState(false);\r\n  const [openModalRecipeList, setOpenModalRecipeList] = useState(false);\r\n  const [openModalRecipeUpdate, setOpenModalRecipeUpdate] = useState(false);\r\n\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n  const [openSnackBarForAdd, setOpenSnackBarForAdd] = useState(false);\r\n  const [openSnackBarForDel, setOpenSnackBarForDel] = useState(false);\r\n  const [openSnackBarForUpdt, setOpenSnackBarForUpdt] = useState(false);\r\n  const [searchKeyword, setSearchKeyword] = useState('');\r\n\r\n  const [categList, setCategList] = useState([]);\r\n\r\n  const [id, setId] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [ingredients, setIngredients] = useState('');\r\n  const [ingredients1, setIngredients1] = useState('');\r\n  const [ingredients2, setIngredients2] = useState('');\r\n  const [ingredients3, setIngredients3] = useState('');\r\n  const [ingredients4, setIngredients4] = useState('');\r\n  const [ingredients5, setIngredients5] = useState('');\r\n  const [ingredients6, setIngredients6] = useState('');\r\n  const [ingredients7, setIngredients7] = useState('');\r\n  const [ingredients8, setIngredients8] = useState('');\r\n  const [ingredients9, setIngredients9] = useState('');\r\n  const [ingredients10, setIngredients10] = useState('');\r\n  const [instruction, setInstruction] = useState('');\r\n  const [instruction1, setInstruction1] = useState('');\r\n  const [instruction2, setInstruction2] = useState('');\r\n  const [instruction3, setInstruction3] = useState('');\r\n  const [instruction4, setInstruction4] = useState('');\r\n  const [instruction5, setInstruction5] = useState('');\r\n  const [instruction6, setInstruction6] = useState('');\r\n  const [instruction7, setInstruction7] = useState('');\r\n  const [instruction8, setInstruction8] = useState('');\r\n  const [instruction9, setInstruction9] = useState('');\r\n  const [instruction10, setInstruction10] = useState('');\r\n  const [photo, setPhoto] = useState('');\r\n  const [photo1, setPhoto1] = useState('');\r\n\r\n  //state for list Recipes\r\n  const [recipeList, setRecipeList] = useState([]);\r\n  const [pageDetails, setPageDetails] = useState(null);\r\n  const [pageSize] = useState(7);\r\n\r\n  const { loadingCatg, categoryAdd, errorCatg, success } = useSelector(state => state.addCategory);\r\n  const { user } = useSelector((state) => state.userSignin);\r\n  const { loadingAdd, recipe, errorAdd, successAdd } = useSelector(state => state.addRecipe);\r\n  const { loadingUpdt, recipeUpdt, errorUpdt, successUpdt } = useSelector(state => state.recipeUpdate);\r\n  const { loadingDel, errorDel, successDel } = useSelector(state => state.recipeDelete);\r\n  const { loading, error } = useSelector(state => state.recipeListAll);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const recipeBy = user.name;\r\n\r\n  const handleRecipeList = useCallback(\r\n    (pageIndex = 1) => {\r\n      dispatch(rbook.recipe.listAllRecipes(pageIndex, pageSize, searchKeyword))\r\n        .then((data) => {\r\n          if (data) {\r\n            setRecipeList(data.docs);\r\n            setPageDetails({\r\n              pageIndex: data.page,\r\n              pageSize: data.limit,\r\n              totalPages: data.totalPages,\r\n              totalDocs: data.totalDocs\r\n            });\r\n          }\r\n        })\r\n    },\r\n    [dispatch, pageSize, searchKeyword],\r\n  );\r\n\r\n  const submitHandlerForSearch = (e) => {\r\n    e.preventDefault();\r\n    dispatch(rbook.recipe.listAllRecipes(searchKeyword));\r\n  };\r\n\r\n  const handleCategoryList = useCallback(\r\n    () => {\r\n      dispatch(rbook.category.listCategories())\r\n        .then((data) => {\r\n          if (data) {\r\n            setCategList(data);\r\n            console.log('CATEGORY DATA', data)\r\n          }\r\n        })\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (categoryAdd) {\r\n      //\r\n    }\r\n    return () => {\r\n      //\r\n    };\r\n  }, [categoryAdd]);\r\n\r\n  useEffect(() => {\r\n    if (recipe) {\r\n      //\r\n    }\r\n    return () => {\r\n      //\r\n    };\r\n  }, [recipe]);\r\n\r\n  useEffect(() => {\r\n   handleCategoryList();\r\n  }, [handleCategoryList]);\r\n\r\n  useEffect(() => {\r\n    handleRecipeList();\r\n  }, [handleRecipeList]);\r\n\r\n  const handleChangePageIndex = (event, value) => {\r\n    handleRecipeList(value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const payload = { name, photo }\r\n    dispatch(rbook.category.addCategory(payload)).then((data) => {\r\n      if (data) {\r\n        handleCategoryList();\r\n      }\r\n    });\r\n    console.log('CATEGORY LIST', categList);\r\n    setOpenSnackBar(true);\r\n    setOpenModalCategory(false);\r\n  }\r\n\r\n  const submitHandlerForRecipe = (event) => {\r\n    event.preventDefault();\r\n    const payload = {\r\n      name,\r\n      description,\r\n      category,\r\n      recipeBy,\r\n      ingredients,\r\n      ingredients1,\r\n      ingredients2,\r\n      ingredients3,\r\n      ingredients4,\r\n      ingredients5,\r\n      ingredients6,\r\n      ingredients7,\r\n      ingredients8,\r\n      ingredients9,\r\n      ingredients10,\r\n      instruction,\r\n      instruction1,\r\n      instruction2,\r\n      instruction3,\r\n      instruction4,\r\n      instruction5,\r\n      instruction6,\r\n      instruction7,\r\n      instruction8,\r\n      instruction9,\r\n      instruction10,\r\n      photo,\r\n      photo1\r\n    }\r\n    dispatch(rbook.recipe.addRecipe(payload)).then((data) => {\r\n      if (data) {\r\n        handleRecipeList();\r\n      }\r\n    });\r\n    setOpenSnackBarForAdd(true);\r\n    setOpenModalRecipe(false);\r\n  }\r\n\r\n  const submitHandlerForRecipeUpdate = (event) => {\r\n    event.preventDefault();\r\n    const payload = {\r\n      id,\r\n      name,\r\n      description,\r\n      category,\r\n      recipeBy,\r\n      ingredients,\r\n      ingredients1,\r\n      ingredients2,\r\n      ingredients3,\r\n      ingredients4,\r\n      ingredients5,\r\n      ingredients6,\r\n      ingredients7,\r\n      ingredients8,\r\n      ingredients9,\r\n      ingredients10,\r\n      instruction,\r\n      instruction1,\r\n      instruction2,\r\n      instruction3,\r\n      instruction4,\r\n      instruction5,\r\n      instruction6,\r\n      instruction7,\r\n      instruction8,\r\n      instruction9,\r\n      instruction10,\r\n      photo,\r\n      photo1\r\n    }\r\n    dispatch(rbook.recipe.updateRecipe(payload)).then((data) => {\r\n      if (data) {\r\n        handleRecipeList();\r\n      }\r\n    });\r\n    setOpenSnackBarForUpdt(true);\r\n    setOpenModalRecipeUpdate(false);\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n    setOpenSnackBarForDel(false);\r\n    setOpenSnackBarForAdd(false);\r\n    setOpenSnackBarForUpdt(false);\r\n  };\r\n\r\n\r\n  //modal for add category\r\n  const handleOpenModalCategory = () => {\r\n    setOpenModalCategory(true);\r\n  };\r\n\r\n  const handleCloseModalCategory = () => {\r\n    setOpenModalCategory(false);\r\n  };\r\n\r\n  //modal for add recipe\r\n  const handleOpenModalRecipe = () => {\r\n    setOpenModalRecipe(true);\r\n  };\r\n\r\n  const handleCloseModalRecipe = () => {\r\n    setOpenModalRecipe(false);\r\n  };\r\n\r\n  //modal for recipeList\r\n  const handleOpenModalRecipeList = () => {\r\n    setOpenModalRecipeList(true);\r\n  };\r\n\r\n  //modal for recipe edit Modal\r\n  const handleOpenModalRecipeUpdate = (recipe) => {\r\n    setOpenModalRecipeUpdate(true);\r\n    setId(recipe._id);\r\n    setName(recipe.name);\r\n    setDescription(recipe.description);\r\n    setCategory(recipe.category);\r\n    setIngredients(recipe.ingredients);\r\n    setIngredients1(recipe.ingredients1);\r\n    setIngredients2(recipe.ingredients2);\r\n    setIngredients3(recipe.ingredients3);\r\n    setIngredients4(recipe.ingredients4);\r\n    setIngredients5(recipe.ingredients5);\r\n    setIngredients6(recipe.ingredients6);\r\n    setIngredients7(recipe.ingredients7);\r\n    setIngredients8(recipe.ingredients8);\r\n    setIngredients9(recipe.ingredients9);\r\n    setIngredients10(recipe.ingredients10);\r\n    setInstruction(recipe.instruction);\r\n    setInstruction1(recipe.instruction1);\r\n    setInstruction2(recipe.instruction2);\r\n    setInstruction3(recipe.instruction3);\r\n    setInstruction4(recipe.instruction4);\r\n    setInstruction5(recipe.instruction5);\r\n    setInstruction6(recipe.instruction6);\r\n    setInstruction7(recipe.instruction7);\r\n    setInstruction8(recipe.instruction8);\r\n    setInstruction9(recipe.instruction9);\r\n    setInstruction10(recipe.instruction10);\r\n    setPhoto(recipe.photo);\r\n    setPhoto1(recipe.photo1);\r\n  };\r\n\r\n  const handleCloseModalRecipeUpdate = () => {\r\n    setOpenModalRecipeUpdate(false);\r\n  };\r\n\r\n  const handleCloseModalRecipeList = () => {\r\n    setOpenModalRecipeList(false);\r\n    setSearchKeyword('');\r\n  };\r\n\r\n  const handleDelete = (recipe) => {\r\n    dispatch(rbook.recipe.deleteRecipe(recipe._id)).then((data) => {\r\n      if (data) {\r\n        handleRecipeList();\r\n      }\r\n    });\r\n    setOpenSnackBarForDel(true);\r\n  }\r\n\r\n  const createBanana = (recipe, idx) => {\r\n    return (\r\n      <TableBody style = {{ display: loading || loadingDel && 'none' }} key={idx}>\r\n        <TableCell>{recipe._id}</TableCell>\r\n        <TableCell>{recipe.name}</TableCell>\r\n        <TableCell>{recipe.finalRating.toFixed(1)}</TableCell>\r\n        <TableCell>{recipe.recipeBy}</TableCell>\r\n        <TableCell><EditIcon onClick={() => handleOpenModalRecipeUpdate(recipe)} color=\"primary\"/></TableCell>\r\n        <TableCell><DeleteIcon onClick={() => handleDelete(recipe)} color=\"secondary\"/></TableCell>\r\n      </TableBody>\r\n    );\r\n  };\r\n\r\n  const showError = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{errorCatg}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccess= () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{category && category.name}category created!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccessDelete = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForDel} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">Recipe Deleted!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showErrorForAddRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForAdd} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{errorAdd}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccessForAddRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForAdd} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{recipe && recipe.name} added in recipes!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showErrorForUpdateRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForUpdt} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{errorUpdt}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccessForUpdateRecipe = () => (\r\n    console.log('UPDATE SUCCESSSS'),\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForUpdt} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{recipeUpdt && recipeUpdt.name} updated!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  document.title = 'Recipebook | Adminpage';\r\n\r\n  return (\r\n    loadingUpdt || loadingDel || loadingCatg || loadingAdd ? <center className='loading1' ><CircularProgress color = 'inherit' /></center> :\r\n    <>\r\n      {successDel && !errorDel && showSuccessDelete()}\r\n      {success && !errorCatg && showSuccess()}\r\n      {!success && errorCatg && showError()}\r\n      {successAdd && !errorAdd && showSuccessForAddRecipe()}\r\n      {!successAdd && errorAdd && showErrorForAddRecipe()}\r\n      {successUpdt && !errorUpdt && showSuccessForUpdateRecipe()}\r\n      {!successUpdt && errorUpdt && showErrorForUpdateRecipe()}\r\n      <div style = {{ fontSize: 25 }}>\r\n        <center className = 'adminPageTitle'>\r\n          Admin Profile\r\n        </center>\r\n        <center style = {{marginTop: '1rem'}}>\r\n          Admin Id: <div style = {{ color:'red' }}>{user._id}</div>\r\n        </center>\r\n        <center style = {{marginTop: '1rem'}}>\r\n          Admin Name: <div style = {{ color:'red' }}>{user.name}</div>\r\n        </center>\r\n        <center style = {{marginTop: '1rem'}}>\r\n          Admin Email: <div style = {{ color:'red' }}>{user.email}</div>\r\n        </center>\r\n      </div>\r\n      <center style = {{marginTop: '1rem'}}>\r\n        <Button onClick={handleOpenModalCategory} startIcon={<AddIcon/>} variant=\"contained\" type=\"submit\">Add Category</Button>\r\n      </center>\r\n      <center style = {{marginTop: '1rem'}}>\r\n        <Button onClick={handleOpenModalRecipe} startIcon={<AddIcon/>} variant=\"contained\" type=\"submit\">Add Recipe</Button>\r\n      </center>\r\n      <center style = {{marginTop: '1rem'}}>\r\n        <Button onClick={handleOpenModalRecipeList} startIcon={<ListIcon/>} variant=\"contained\" type=\"submit\">Recipe List</Button>\r\n      </center>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={openModalCategory}\r\n        onClose={handleCloseModalCategory}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n     >\r\n       <Fade in={openModalCategory}>\r\n         <div className={classes.paper}>\r\n           <div  className = 'container'>\r\n             <form onSubmit = {submitHandler} className = 'form-container'>\r\n               <FormControl className={(classes.margin, classes.textField)}>\r\n                 <InputLabel>Name of category</InputLabel>\r\n                 <Input\r\n                   type = \"text\"\r\n                   onChange={(e) => setName(e.target.value)}\r\n                   style = {{width: '100%'}}\r\n                   required\r\n                   label=\"category\"\r\n                   id = 'name'\r\n                   name = 'name'\r\n                 />\r\n               </FormControl>\r\n               <div className={classes.root}>\r\n                 <input\r\n                   accept=\"image/*\"\r\n                   className={classes.input}\r\n                   id=\"photo\"\r\n                   required\r\n                   type=\"file\"\r\n                   name = 'photo'\r\n                   onChange={(e) => setPhoto(e.target.files[0])}\r\n                 />\r\n                 <label className=\"addButtons\" htmlFor=\"photo\">\r\n                   <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                     Upload Category Photo\r\n                   </Button>\r\n                 </label>\r\n               </div>\r\n               <Button style={{width:'100%', marginTop: \"1rem\"}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Category</Button>\r\n               <Button onClick={handleCloseModalCategory} style={{width:'100%', marginTop: \"1rem\"}} color=\"primary\" startIcon={<ClearIcon/>} variant=\"contained\">Cancel</Button>\r\n             </form>\r\n           </div>\r\n         </div>\r\n       </Fade>\r\n     </Modal>\r\n     <Modal\r\n       aria-labelledby=\"transition-modal-title\"\r\n       aria-describedby=\"transition-modal-description\"\r\n       className={classes.modal}\r\n       open={openModalRecipeList}\r\n       onClose={handleCloseModalRecipeList}\r\n       closeAfterTransition\r\n       BackdropComponent={Backdrop}\r\n       BackdropProps={{\r\n         timeout: 500,\r\n       }}\r\n    >\r\n      <Fade in={openModalRecipeList}>\r\n        <div className={classes.paper2}>\r\n          <div>\r\n          {loading && <center><CircularProgress color='inherit' className = 'loading1' /></center>}\r\n          {loadingDel && <center><CircularProgress color='inherit' className = 'loading1' /></center>}\r\n          {error && <div>{error}</div>}\r\n          <form style = {{ marginTop: '3%', marginBottom: '3%' }} onSubmit={submitHandlerForSearch}>\r\n            <TextField\r\n              placeholder = 'Search for recipes?'\r\n              className = 'searchBar'\r\n              id=\"outlined-search\"\r\n              type=\"search\"\r\n              variant=\"outlined\"\r\n              name=\"searchKeyword\"\r\n              value={searchKeyword}\r\n              onChange={(e) => setSearchKeyword(e.target.value)}\r\n            />\r\n          </form>\r\n          <TableContainer style = {{ display: loading && 'none' }} component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow style={{ marginTop:\"1rem\" }} >\r\n                  <TableCell>ID</TableCell>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Rating</TableCell>\r\n                  <TableCell>Author</TableCell>\r\n                  <TableCell>Edit</TableCell>\r\n                  <TableCell>Delete</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              {recipeList.map((recipe, index) => (\r\n                createBanana(recipe, index)\r\n              ))}\r\n            </Table>\r\n          </TableContainer>\r\n          <Pagination\r\n            style = {{ display: loading && 'none', marginTop: \"1rem\" }}\r\n            count={pageDetails && pageDetails.totalPages}\r\n            page={pageDetails && pageDetails.pageIndex}\r\n            defaultPage={1}\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onChange={handleChangePageIndex}\r\n            classes={{ ul: classes.paginator }}\r\n          />\r\n          <Modal\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            className={classes.modal}\r\n            open={openModalRecipeUpdate}\r\n            onClose={handleCloseModalRecipeUpdate}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n              timeout: 500,\r\n            }}\r\n         >\r\n           <Fade in={openModalRecipeUpdate}>\r\n             <div className={classes.paper1}>\r\n               <div className = 'container'>\r\n                 <form onSubmit = {submitHandlerForRecipeUpdate} className = 'form-container'>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Name of the recipe</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={name}\r\n                       onChange={(e) => setName(e.target.value)}\r\n                       required\r\n                       id = 'name'\r\n                       name = 'name'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <TextField\r\n                       id=\"description\"\r\n                       label=\"Description\"\r\n                       value={description}\r\n                       multiline\r\n                       name=\"description\"\r\n                       onChange={(e) => setDescription(e.target.value)}\r\n                       variant=\"outlined\"\r\n                       rows={4}\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl required className={(classes.margin, classes.textField)}>\r\n                     <Select\r\n                       native\r\n                       required\r\n                       variant=\"outlined\"\r\n                       onChange={(e) => setCategory(e.target.value)}\r\n                       value={category}\r\n                       inputProps={{\r\n                         name: 'category',\r\n                         id: 'category',\r\n                       }}\r\n                     >\r\n                       <option value = \"\">Select Category</option>\r\n                       {\r\n                        categList.map((c, i) => (\r\n                          <option key={i} value={c._id}>\r\n                              {c.name}\r\n                          </option>\r\n                       ))}\r\n                     </Select>\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 1 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients}\r\n                       onChange={(e) => setIngredients(e.target.value)}\r\n                       required\r\n                       id = 'ingredients'\r\n                       name = 'ingredients'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 2 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients1}\r\n                       onChange={(e) => setIngredients1(e.target.value)}\r\n                       required\r\n                       id = 'ingredients1'\r\n                       name = 'ingredients1'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 3 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients2}\r\n                       onChange={(e) => setIngredients2(e.target.value)}\r\n                       required\r\n                       id = 'ingredients2'\r\n                       name = 'ingredients2'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 4 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients3}\r\n                       onChange={(e) => setIngredients3(e.target.value)}\r\n                       id = 'ingredients3'\r\n                       name = 'ingredients3'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 5 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients4}\r\n                       onChange={(e) => setIngredients4(e.target.value)}\r\n                       id = 'ingredients4'\r\n                       name = 'ingredients4'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 6 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients5}\r\n                       onChange={(e) => setIngredients5(e.target.value)}\r\n                       id = 'ingredients5'\r\n                       name = 'ingredients5'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 7 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients6}\r\n                       onChange={(e) => setIngredients6(e.target.value)}\r\n                       id = 'ingredients6'\r\n                       name = 'ingredients6'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 8 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients7}\r\n                       onChange={(e) => setIngredients7(e.target.value)}\r\n                       id = 'ingredients7'\r\n                       name = 'ingredients7'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 9 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients8}\r\n                       onChange={(e) => setIngredients8(e.target.value)}\r\n                       id = 'ingredients8'\r\n                       name = 'ingredients8'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 10 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients9}\r\n                       onChange={(e) => setIngredients9(e.target.value)}\r\n                       id = 'ingredients9'\r\n                       name = 'ingredients9'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 11 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients10}\r\n                       onChange={(e) => setIngredients10(e.target.value)}\r\n                       id = 'ingredients10'\r\n                       name = 'ingredients10'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 1 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction}\r\n                       onChange={(e) => setInstruction(e.target.value)}\r\n                       required\r\n                       id = 'instruction'\r\n                       name = 'instruction'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 2 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction1}\r\n                       onChange={(e) => setInstruction1(e.target.value)}\r\n                       required\r\n                       id = 'instruction1'\r\n                       name = 'instruction1'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 3 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction2}\r\n                       onChange={(e) => setInstruction2(e.target.value)}\r\n                       required\r\n                       id = 'instruction2'\r\n                       name = 'instruction2'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 4 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction3}\r\n                       onChange={(e) => setInstruction3(e.target.value)}\r\n                       id = 'instruction3'\r\n                       name = 'instruction3'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 5 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction4}\r\n                       onChange={(e) => setInstruction4(e.target.value)}\r\n                       id = 'instruction4'\r\n                       name = 'instruction4'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 6 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction5}\r\n                       onChange={(e) => setInstruction5(e.target.value)}\r\n                       id = 'instruction5'\r\n                       name = 'instruction5'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 7 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction6}\r\n                       onChange={(e) => setInstruction6(e.target.value)}\r\n                       id = 'instruction6'\r\n                       name = 'instruction6'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 8 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction7}\r\n                       onChange={(e) => setInstruction7(e.target.value)}\r\n                       id = 'instruction7'\r\n                       name = 'instruction7'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 9 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction8}\r\n                       onChange={(e) => setInstruction8(e.target.value)}\r\n                       id = 'instruction8'\r\n                       name = 'instruction8'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 10 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction9}\r\n                       onChange={(e) => setInstruction9(e.target.value)}\r\n                       id = 'instruction9'\r\n                       name = 'instruction9'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 11 (if necesarry)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction10}\r\n                       onChange={(e) => setInstruction10(e.target.value)}\r\n                       id = 'instruction10'\r\n                       name = 'instruction10'\r\n                     />\r\n                   </FormControl>\r\n                   <div className={classes.root}>\r\n                     <input\r\n                       accept=\"image/*\"\r\n                       className={classes.input}\r\n                       id=\"photo\"\r\n                       required\r\n                       type=\"file\"\r\n                       name = 'photo'\r\n                       onChange={(e) => setPhoto(e.target.files[0])}\r\n                     />\r\n                     <label className=\"addButtons\" htmlFor=\"photo\">\r\n                       <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                         Upload Recipe Photo\r\n                       </Button>\r\n                     </label>\r\n                   </div>\r\n                   <div className={classes.root}>\r\n                     <input\r\n                       accept=\"image/*\"\r\n                       className={classes.input}\r\n                       id=\"photo1\"\r\n                       required\r\n                       type=\"file\"\r\n                       name = 'photo1'\r\n                       onChange={(e) => setPhoto1(e.target.files[0])}\r\n                     />\r\n                     <label className=\"addButtons\" htmlFor=\"photo1\">\r\n                       <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                         Upload Recipe Details Photo\r\n                       </Button>\r\n                     </label>\r\n                   </div>\r\n                   <Button style={{width:'100%', marginTop: \"1rem\"}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Recipe</Button>\r\n                   <Button onClick={handleCloseModalRecipeUpdate} style={{width:'100%', marginTop: \"1rem\"}} color=\"primary\" startIcon={<ClearIcon/>} variant=\"contained\">Cancel</Button>\r\n                 </form>\r\n               </div>\r\n             </div>\r\n           </Fade>\r\n         </Modal>\r\n          </div>\r\n        </div>\r\n      </Fade>\r\n    </Modal>\r\n     <Modal\r\n       aria-labelledby=\"transition-modal-title\"\r\n       aria-describedby=\"transition-modal-description\"\r\n       className={classes.modal}\r\n       open={openModalRecipe}\r\n       onClose={handleCloseModalRecipe}\r\n       closeAfterTransition\r\n       BackdropComponent={Backdrop}\r\n       BackdropProps={{\r\n         timeout: 500,\r\n       }}\r\n    >\r\n      <Fade in={openModalRecipe}>\r\n        <div className={classes.paper1}>\r\n          <div className = 'container'>\r\n            <form onSubmit = {submitHandlerForRecipe} className = 'form-container'>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Name of the recipe</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  required\r\n                  id = 'name'\r\n                  name = 'name'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <TextField\r\n                  id=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  name=\"description\"\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  rows={4}\r\n                />\r\n              </FormControl>\r\n              <FormControl required className={(classes.margin, classes.textField)}>\r\n                <Select\r\n                  native\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setCategory(e.target.value)}\r\n                  inputProps={{\r\n                    name: 'category',\r\n                    id: 'category',\r\n                  }}\r\n                >\r\n                  <option value = \"\">Select Category</option>\r\n                  {\r\n                   categList.map((c, i) => (\r\n                     <option key={i} value={c._id}>\r\n                         {c.name}\r\n                     </option>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 1 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients(e.target.value)}\r\n                  required\r\n                  id = 'ingredients'\r\n                  name = 'ingredients'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 2 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients1(e.target.value)}\r\n                  required\r\n                  id = 'ingredients1'\r\n                  name = 'ingredients1'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 3 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients2(e.target.value)}\r\n                  required\r\n                  id = 'ingredients2'\r\n                  name = 'ingredients2'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 4 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients3(e.target.value)}\r\n                  id = 'ingredients3'\r\n                  name = 'ingredients3'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 5 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients4(e.target.value)}\r\n                  id = 'ingredients4'\r\n                  name = 'ingredients4'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 6 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients5(e.target.value)}\r\n                  id = 'ingredients5'\r\n                  name = 'ingredients5'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 7 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients6(e.target.value)}\r\n                  id = 'ingredients6'\r\n                  name = 'ingredients6'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 8 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients7(e.target.value)}\r\n                  id = 'ingredients7'\r\n                  name = 'ingredients7'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 9 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients8(e.target.value)}\r\n                  id = 'ingredients8'\r\n                  name = 'ingredients8'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 10 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients9(e.target.value)}\r\n                  id = 'ingredients9'\r\n                  name = 'ingredients9'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 11 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients10(e.target.value)}\r\n                  id = 'ingredients10'\r\n                  name = 'ingredients10'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 1 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction(e.target.value)}\r\n                  required\r\n                  id = 'instruction'\r\n                  name = 'instruction'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 2 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction1(e.target.value)}\r\n                  required\r\n                  id = 'instruction1'\r\n                  name = 'instruction1'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 3 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction2(e.target.value)}\r\n                  required\r\n                  id = 'instruction2'\r\n                  name = 'instruction2'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 4 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction3(e.target.value)}\r\n                  id = 'instruction3'\r\n                  name = 'instruction3'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 5 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction4(e.target.value)}\r\n                  id = 'instruction4'\r\n                  name = 'instruction4'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 6 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction5(e.target.value)}\r\n                  id = 'instruction5'\r\n                  name = 'instruction5'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 7 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction6(e.target.value)}\r\n                  id = 'instruction6'\r\n                  name = 'instruction6'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 8 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction7(e.target.value)}\r\n                  id = 'instruction7'\r\n                  name = 'instruction7'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 9 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction8(e.target.value)}\r\n                  id = 'instruction8'\r\n                  name = 'instruction8'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 10 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction9(e.target.value)}\r\n                  id = 'instruction9'\r\n                  name = 'instruction9'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 11 (if necesarry)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction10(e.target.value)}\r\n                  id = 'instruction10'\r\n                  name = 'instruction10'\r\n                />\r\n              </FormControl>\r\n              <div className={classes.root}>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  required\r\n                  className={classes.input}\r\n                  id=\"photo\"\r\n                  type=\"file\"\r\n                  name = 'photo'\r\n                  onChange={(e) => setPhoto(e.target.files[0])}\r\n                />\r\n                <label className=\"addButtons\" htmlFor=\"photo\">\r\n                  <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                    Upload Recipe Photo\r\n                  </Button>\r\n                </label>\r\n              </div>\r\n              <div className={classes.root}>\r\n                <input\r\n                accept=\"image/*\"\r\n                required\r\n                className={classes.input}\r\n                id=\"photo1\"\r\n                type=\"file\"\r\n                name = 'photo1'\r\n                onChange={(e) => setPhoto1(e.target.files[0])}\r\n                />\r\n                <label className=\"addButtons\" htmlFor=\"photo1\">\r\n                  <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                    Upload Recipe Details Photo\r\n                  </Button>\r\n                </label>\r\n              </div>\r\n              <Button style={{width:'100%', marginTop: \"1rem\"}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Recipe</Button>\r\n              <Button onClick={handleCloseModalRecipe} style={{width:'100%', marginTop: \"1rem\"}} color=\"primary\" startIcon={<ClearIcon/>} variant=\"contained\">Cancel</Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Fade>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminPage;\r\n",["150","151"],"C:\\Users\\pillo\\recipebook\\src\\pages\\allRecipe.js",["152"],"C:\\Users\\pillo\\recipebook\\src\\components\\navbar.js",[],"C:\\Users\\pillo\\recipebook\\src\\components\\footer.js",[],["153","154"],"C:\\Users\\pillo\\recipebook\\src\\components\\navbarLow.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\signup.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\mainHomepage.js",["155","156","157","158","159","160","161","162"],"import React, { useState } from 'react';\r\n\r\n//redux\r\nimport { useSelector } from 'react-redux';\r\n\r\n//pages\r\nimport Home from './home';\r\nimport NewRecipes from './newRecipes';\r\nimport CategsHome from './categsHome';\r\n\r\n//material-ui\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst MainHome = () => {\r\n\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const { userInfo } = useSelector((state) => state.userRegister);\r\n\r\n  return (\r\n    <>\r\n      <CategsHome/>\r\n      <Home/>\r\n      <NewRecipes/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainHome\r\n","C:\\Users\\pillo\\recipebook\\src\\routes\\privateRoute.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\loggedInRoute.js",[],["163","164"],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\recipeReducers.js",[],["165","166"],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\categoryReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\category.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\user.js",[],"C:\\Users\\pillo\\recipebook\\src\\App.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\home.js",["167","168"],"import React, { useEffect } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: \"35rem\",\r\n    maxWidth: \"15rem\",\r\n    marginLeft: '.7rem',\r\n    whiteSpace: 'nowrap',\r\n    marginTop: '1rem'\r\n  },\r\n});\r\n\r\nconst Home = () => {\r\n  document.title='Recipebook | Home';\r\n\r\n  const { recipes, loading, error } = useSelector(state => state.recipeRate);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(rbook.recipe.listRateRecipes());\r\n    return () => {\r\n    //\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    loading? null : error? <div>{error}</div> :\r\n    <>\r\n      <center className = 'welcomeTitle'>Popular recipes</center>\r\n      <div className = 'home-container'>\r\n      { recipes.length > 0 ? (\r\n        <>\r\n          {\r\n           recipes.map( recipes =>\r\n            <Card key={recipes.name} className={classes.root}>\r\n               <CardMedia\r\n                 component=\"img\"\r\n                 alt={recipes.name}\r\n                 height=\"250\"\r\n                 image={`/api/recipe/photo/${recipes._id}`}\r\n                 title={recipes.name}\r\n               />\r\n               <CardContent>\r\n                 <Typography gutterBottom variant=\"h6\">\r\n                   <Box\r\n                     component=\"div\"\r\n                     my={2}\r\n                     textOverflow=\"ellipsis\"\r\n                     overflow=\"hidden\"\r\n                   >\r\n                     {recipes.name}\r\n                   </Box>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <Rating precision={.2} readOnly value={recipes.rating.toFixed(1)}/> <div style = {{fontSize: \"1.5rem\"}}>{recipes.rating.toFixed(1)}</div>\r\n                 </Typography>\r\n                 <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                   <div style = {{fontSize: \"1rem\"}}>Number of reviews: {recipes.numReviews}</div>\r\n                 </Typography>\r\n               </CardContent>\r\n               <CardActions>\r\n                 <Link to = {`/detail/${recipes._id}`}>\r\n                   <Button size=\"small\" color=\"primary\">\r\n                     Read more\r\n                   </Button>\r\n                 </Link>\r\n               </CardActions>\r\n             </Card>\r\n            )\r\n           }\r\n         </>\r\n      ) : (\r\n        <div style = {{fontSize: '4rem'}} >No recipes found</div>\r\n      ) }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\pillo\\recipebook\\src\\pages\\categsHome.js",["169"],"import React, { useState, useCallback, useEffect } from 'react';\r\n\r\n//redux\r\nimport { useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//navigation\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\n//import CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n//import Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Carousel\r\nimport Carousel from \"react-elastic-carousel\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: \"35rem\",\r\n    width: \"12rem\",\r\n    whiteSpace: 'nowrap',\r\n    marginTop: '1rem'\r\n  },\r\n});\r\n\r\nconst breakPoints = [\r\n  { width: 150, itemsToShow: 1 },\r\n  { width: 250, itemsToShow: 1 },\r\n  { width: 350, itemsToShow: 1 },\r\n  { width: 450, itemsToShow: 1 },\r\n  { width: 550, itemsToShow: 2 },\r\n  { width: 768, itemsToShow: 4 },\r\n  { width: 1000, itemsToShow: 6 },\r\n  //{ width: 1500, itemsToShow: 7 },\r\n];\r\n\r\nconst CategsHome = () => {\r\n\r\n  document.title='Recipebook | Home';\r\n\r\n  const [categList, setCategList] = useState([]);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const handleCategoryList = useCallback(\r\n    () => {\r\n      dispatch(rbook.category.listCategories())\r\n        .then((data) => {\r\n          if (data) {\r\n            setCategList(data);\r\n          }\r\n        })\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  useEffect(() => {\r\n    handleCategoryList();\r\n  }, [handleCategoryList]);\r\n\r\n  const handleCategoryId = (category) => {\r\n    console.log(category._id)\r\n    history.push('/recipes?category=' + category._id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"carousel\">\r\n      <center className = 'welcomeTitle'>Browse by categories</center>\r\n      <div className = 'home-container'>\r\n        <Carousel\r\n          showArrows={false}\r\n          breakPoints={breakPoints}\r\n        >\r\n          {\r\n           categList.map((c, i) => (\r\n             <Card title={c.name} style={{cursor: \"pointer\"}} onClick={() => handleCategoryId(c)} key={c.name} className={classes.root}>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt={c.name}\r\n                  height=\"120\"\r\n                  image={`/api/category/photo/${c._id}`}\r\n                  title={c.name}\r\n                >\r\n                </CardMedia>\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h6\">\r\n                    {c.name}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n          ))}\r\n        </Carousel>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategsHome;\r\n","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\index.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\adminRoute.js",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"170","replacedBy":"174"},{"ruleId":"172","replacedBy":"175"},{"ruleId":"170","replacedBy":"176"},{"ruleId":"172","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":74,"column":6,"nodeType":"180","endLine":74,"endColumn":24,"suggestions":"181"},{"ruleId":"170","replacedBy":"182"},{"ruleId":"172","replacedBy":"183"},{"ruleId":"178","severity":1,"message":"184","line":43,"column":6,"nodeType":"180","endLine":43,"endColumn":8,"suggestions":"185"},{"ruleId":"170","replacedBy":"186"},{"ruleId":"172","replacedBy":"187"},{"ruleId":"170","replacedBy":"188"},{"ruleId":"172","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":391,"column":46,"nodeType":"192","messageId":"193","endLine":391,"endColumn":48},{"ruleId":"190","severity":1,"message":"191","line":391,"column":60,"nodeType":"192","messageId":"193","endLine":391,"endColumn":62},{"ruleId":"194","severity":1,"message":"195","line":439,"column":36,"nodeType":"196","messageId":"197","endLine":439,"endColumn":37},{"ruleId":"170","replacedBy":"198"},{"ruleId":"172","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":45,"column":10,"nodeType":"202","messageId":"203","endLine":45,"endColumn":18},{"ruleId":"170","replacedBy":"204"},{"ruleId":"172","replacedBy":"205"},{"ruleId":"200","severity":1,"message":"206","line":12,"column":8,"nodeType":"202","messageId":"203","endLine":12,"endColumn":13},{"ruleId":"200","severity":1,"message":"207","line":13,"column":8,"nodeType":"202","messageId":"203","endLine":13,"endColumn":18},{"ruleId":"200","severity":1,"message":"208","line":14,"column":8,"nodeType":"202","messageId":"203","endLine":14,"endColumn":18},{"ruleId":"200","severity":1,"message":"209","line":15,"column":8,"nodeType":"202","messageId":"203","endLine":15,"endColumn":16},{"ruleId":"200","severity":1,"message":"210","line":16,"column":8,"nodeType":"202","messageId":"203","endLine":16,"endColumn":17},{"ruleId":"200","severity":1,"message":"211","line":20,"column":10,"nodeType":"202","messageId":"203","endLine":20,"endColumn":14},{"ruleId":"200","severity":1,"message":"212","line":20,"column":16,"nodeType":"202","messageId":"203","endLine":20,"endColumn":23},{"ruleId":"200","severity":1,"message":"213","line":22,"column":11,"nodeType":"202","messageId":"203","endLine":22,"endColumn":19},{"ruleId":"170","replacedBy":"214"},{"ruleId":"172","replacedBy":"215"},{"ruleId":"170","replacedBy":"216"},{"ruleId":"172","replacedBy":"217"},{"ruleId":"200","severity":1,"message":"218","line":18,"column":8,"nodeType":"202","messageId":"203","endLine":18,"endColumn":24},{"ruleId":"178","severity":1,"message":"184","line":45,"column":6,"nodeType":"180","endLine":45,"endColumn":8,"suggestions":"219"},{"ruleId":"200","severity":1,"message":"220","line":18,"column":8,"nodeType":"202","messageId":"203","endLine":18,"endColumn":11},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],["221"],["222"],["221"],["222"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["223"],["221"],["222"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["224"],["221"],["222"],["221"],["222"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["221"],["222"],"no-unused-vars","'category' is assigned a value but never used.","Identifier","unusedVar",["221"],["222"],"'Alert' is defined but never used.","'AlertTitle' is defined but never used.","'IconButton' is defined but never used.","'Collapse' is defined but never used.","'CloseIcon' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'userInfo' is assigned a value but never used.",["221"],["222"],["221"],["222"],"'CircularProgress' is defined but never used.",["225"],"'Box' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"228","fix":"230"},"Update the dependencies array to be: [dispatch, props.match.params.id, recipeReviewSave]",{"range":"231","text":"232"},"Update the dependencies array to be: [dispatch]",{"range":"233","text":"234"},{"range":"235","text":"234"},[2253,2271],"[dispatch, props.match.params.id, recipeReviewSave]",[1233,1235],"[dispatch]",[1272,1274]]