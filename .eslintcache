[{"C:\\Users\\pillo\\recipebook\\src\\redux\\store.js":"1","C:\\Users\\pillo\\recipebook\\src\\pages\\about.js":"2","C:\\Users\\pillo\\recipebook\\src\\pages\\default.js":"3","C:\\Users\\pillo\\recipebook\\src\\pages\\signin.js":"4","C:\\Users\\pillo\\recipebook\\src\\pages\\recipeDetails.js":"5","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\userReducers.js":"6","C:\\Users\\pillo\\recipebook\\src\\redux\\combineActions.js":"7","C:\\Users\\pillo\\recipebook\\src\\redux\\types.js":"8","C:\\Users\\pillo\\recipebook\\src\\pages\\newRecipes.js":"9","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\recipe.js":"10","C:\\Users\\pillo\\recipebook\\src\\index.js":"11","C:\\Users\\pillo\\recipebook\\src\\adminPage\\adminPage.js":"12","C:\\Users\\pillo\\recipebook\\src\\pages\\allRecipe.js":"13","C:\\Users\\pillo\\recipebook\\src\\components\\navbar.js":"14","C:\\Users\\pillo\\recipebook\\src\\components\\footer.js":"15","C:\\Users\\pillo\\recipebook\\src\\components\\navbarLow.js":"16","C:\\Users\\pillo\\recipebook\\src\\pages\\signup.js":"17","C:\\Users\\pillo\\recipebook\\src\\pages\\mainHomepage.js":"18","C:\\Users\\pillo\\recipebook\\src\\routes\\privateRoute.js":"19","C:\\Users\\pillo\\recipebook\\src\\routes\\loggedInRoute.js":"20","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\recipeReducers.js":"21","C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\categoryReducers.js":"22","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\category.js":"23","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\user.js":"24","C:\\Users\\pillo\\recipebook\\src\\App.js":"25","C:\\Users\\pillo\\recipebook\\src\\pages\\home.js":"26","C:\\Users\\pillo\\recipebook\\src\\pages\\categsHome.js":"27","C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\index.js":"28","C:\\Users\\pillo\\recipebook\\src\\routes\\adminRoute.js":"29"},{"size":1456,"mtime":1616164585270,"results":"30","hashOfConfig":"31"},{"size":755,"mtime":1616253901007,"results":"32","hashOfConfig":"31"},{"size":412,"mtime":1611759582416,"results":"33","hashOfConfig":"31"},{"size":4886,"mtime":1616247175317,"results":"34","hashOfConfig":"35"},{"size":15396,"mtime":1617698254353,"results":"36","hashOfConfig":"31"},{"size":930,"mtime":1611759582422,"results":"37","hashOfConfig":"31"},{"size":58,"mtime":1611754583186,"results":"38","hashOfConfig":"31"},{"size":2340,"mtime":1613478352531,"results":"39","hashOfConfig":"31"},{"size":4865,"mtime":1616244984956,"results":"40","hashOfConfig":"35"},{"size":5151,"mtime":1617690510125,"results":"41","hashOfConfig":"31"},{"size":306,"mtime":1611754583186,"results":"42","hashOfConfig":"35"},{"size":98441,"mtime":1620706468205,"results":"43","hashOfConfig":"35"},{"size":7416,"mtime":1620706525757,"results":"44","hashOfConfig":"35"},{"size":4610,"mtime":1617298993387,"results":"45","hashOfConfig":"35"},{"size":158,"mtime":1611759582412,"results":"46","hashOfConfig":"31"},{"size":7599,"mtime":1617298993388,"results":"47","hashOfConfig":"31"},{"size":6447,"mtime":1620706386247,"results":"48","hashOfConfig":"35"},{"size":298,"mtime":1620706581772,"results":"49","hashOfConfig":"35"},{"size":779,"mtime":1617298993393,"results":"50","hashOfConfig":"35"},{"size":770,"mtime":1617298993392,"results":"51","hashOfConfig":"35"},{"size":3587,"mtime":1617383747225,"results":"52","hashOfConfig":"35"},{"size":923,"mtime":1616164295705,"results":"53","hashOfConfig":"31"},{"size":1245,"mtime":1616164280733,"results":"54","hashOfConfig":"35"},{"size":1437,"mtime":1615989636767,"results":"55","hashOfConfig":"31"},{"size":1623,"mtime":1617298993385,"results":"56","hashOfConfig":"35"},{"size":4502,"mtime":1620706542972,"results":"57","hashOfConfig":"35"},{"size":3004,"mtime":1620706532555,"results":"58","hashOfConfig":"35"},{"size":160,"mtime":1611754583186,"results":"59","hashOfConfig":"35"},{"size":712,"mtime":1617298993390,"results":"60","hashOfConfig":"35"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1xgjjn2",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"1e6pkla",{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pillo\\recipebook\\src\\redux\\store.js",[],["124","125"],"C:\\Users\\pillo\\recipebook\\src\\pages\\about.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\default.js",[],["126","127"],"C:\\Users\\pillo\\recipebook\\src\\pages\\signin.js",[],["128","129"],"C:\\Users\\pillo\\recipebook\\src\\pages\\recipeDetails.js",["130"],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\userReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\combineActions.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\types.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\newRecipes.js",["131"],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\recipe.js",[],"C:\\Users\\pillo\\recipebook\\src\\index.js",[],"C:\\Users\\pillo\\recipebook\\src\\adminPage\\adminPage.js",["132","133","134","135"],"import React, { useEffect, useState, useCallback } from 'react';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { rbook } from '../redux/combineActions';\r\n\r\n//material-ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Input from '@material-ui/core/Input';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Select from '@material-ui/core/Select';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { useMediaQuery } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width:'58rem',\r\n  },\r\n  paper1: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width:'58rem',\r\n    height: \"100%\",\r\n    overflow: \"scroll\"\r\n  },\r\n  textField: {\r\n    marginTop: '3%',\r\n    marginBottom: '3%',\r\n    width: '100%',\r\n    '& label.Mui-focused': {\r\n      color: '#FF3F16',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#FF3F16',\r\n    },\r\n  },\r\n  table: {\r\n    width: '28rem',\r\n  },\r\n  paper2: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    maxWidth:'100%',\r\n    height: \"100%\",\r\n    overflow: \"scroll\"\r\n  },\r\n  paper2LowReso: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    maxWidth:'25rem',\r\n    height: \"100%\",\r\n    overflow: \"scroll\"\r\n  },\r\n  tableCell: {\r\n    whiteSpace: \"nowrap\",\r\n    textOverflow: \"ellipsis\",\r\n    width: \"100px\",\r\n    display: \"block\",\r\n    overflow: \"hidden\"\r\n  },\r\n  tableCell1: {\r\n    //whiteSpace: \"nowrap\",\r\n    //textOverflow: \"ellipsis\",\r\n    width: \"10rem\",\r\n    //display: \"block\",\r\n    //overflow: \"hidden\"\r\n  }\r\n\r\n}));\r\n\r\nconst AdminPage = () => {\r\n  const lowReso = useMediaQuery('(max-width: 718px)');\r\n\r\n  const [openModalCategory, setOpenModalCategory] = useState(false);\r\n  const [openModalRecipe, setOpenModalRecipe] = useState(false);\r\n  const [openModalRecipeList, setOpenModalRecipeList] = useState(false);\r\n  const [openModalRecipeUpdate, setOpenModalRecipeUpdate] = useState(false);\r\n\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n  const [openSnackBarForAdd, setOpenSnackBarForAdd] = useState(false);\r\n  const [openSnackBarForDel, setOpenSnackBarForDel] = useState(false);\r\n  const [openSnackBarForUpdt, setOpenSnackBarForUpdt] = useState(false);\r\n  const [searchKeyword, setSearchKeyword] = useState('');\r\n\r\n  const [categList, setCategList] = useState([]);\r\n\r\n  const [id, setId] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [ingredients, setIngredients] = useState('');\r\n  const [ingredients1, setIngredients1] = useState('');\r\n  const [ingredients2, setIngredients2] = useState('');\r\n  const [ingredients3, setIngredients3] = useState('');\r\n  const [ingredients4, setIngredients4] = useState('');\r\n  const [ingredients5, setIngredients5] = useState('');\r\n  const [ingredients6, setIngredients6] = useState('');\r\n  const [ingredients7, setIngredients7] = useState('');\r\n  const [ingredients8, setIngredients8] = useState('');\r\n  const [ingredients9, setIngredients9] = useState('');\r\n  const [ingredients10, setIngredients10] = useState('');\r\n\r\n  const [ingredients11, setIngredients11] = useState('');\r\n  const [ingredients12, setIngredients12] = useState('');\r\n  const [ingredients13, setIngredients13] = useState('');\r\n  const [ingredients14, setIngredients14] = useState('');\r\n  const [ingredients15, setIngredients15] = useState('');\r\n  const [ingredients16, setIngredients16] = useState('');\r\n  const [ingredients17, setIngredients17] = useState('');\r\n  const [ingredients18, setIngredients18] = useState('');\r\n  const [ingredients19, setIngredients19] = useState('');\r\n\r\n  const [ingredients20, setIngredients20] = useState('');\r\n  const [ingredients21, setIngredients21] = useState('');\r\n  const [ingredients22, setIngredients22] = useState('');\r\n  const [ingredients23, setIngredients23] = useState('');\r\n  const [ingredients24, setIngredients24] = useState('');\r\n  const [ingredients25, setIngredients25] = useState('');\r\n\r\n  const [instruction, setInstruction] = useState('');\r\n  const [instruction1, setInstruction1] = useState('');\r\n  const [instruction2, setInstruction2] = useState('');\r\n  const [instruction3, setInstruction3] = useState('');\r\n  const [instruction4, setInstruction4] = useState('');\r\n  const [instruction5, setInstruction5] = useState('');\r\n  const [instruction6, setInstruction6] = useState('');\r\n  const [instruction7, setInstruction7] = useState('');\r\n  const [instruction8, setInstruction8] = useState('');\r\n  const [instruction9, setInstruction9] = useState('');\r\n  const [instruction10, setInstruction10] = useState('');\r\n\r\n  const [instruction11, setInstruction11] = useState('');\r\n  const [instruction12, setInstruction12] = useState('');\r\n  const [instruction13, setInstruction13] = useState('');\r\n  const [instruction14, setInstruction14] = useState('');\r\n  const [instruction15, setInstruction15] = useState('');\r\n  const [instruction16, setInstruction16] = useState('');\r\n  const [instruction17, setInstruction17] = useState('');\r\n  const [instruction18, setInstruction18] = useState('');\r\n  const [instruction19, setInstruction19] = useState('');\r\n\r\n  const [instruction20, setInstruction20] = useState('');\r\n  const [instruction21, setInstruction21] = useState('');\r\n  const [instruction22, setInstruction22] = useState('');\r\n  const [instruction23, setInstruction23] = useState('');\r\n  const [instruction24, setInstruction24] = useState('');\r\n  const [instruction25, setInstruction25] = useState('');\r\n\r\n  const [photo, setPhoto] = useState('');\r\n  const [photo1, setPhoto1] = useState('');\r\n\r\n  //state for list Recipes\r\n  const [recipeList, setRecipeList] = useState([]);\r\n  const [pageDetails, setPageDetails] = useState(null);\r\n  const [pageSize] = useState(7);\r\n\r\n  const [showIngredient4, setShowIngredient4] = useState(false);\r\n  const [showIngredient5, setShowIngredient5] = useState(false);\r\n  const [showIngredient6, setShowIngredient6] = useState(false);\r\n  const [showIngredient7, setShowIngredient7] = useState(false);\r\n  const [showIngredient8, setShowIngredient8] = useState(false);\r\n  const [showIngredient9, setShowIngredient9] = useState(false);\r\n  const [showIngredient10, setShowIngredient10] = useState(false);\r\n  const [showIngredient11, setShowIngredient11] = useState(false);\r\n  const [showIngredient12, setShowIngredient12] = useState(false);\r\n  const [showIngredient13, setShowIngredient13] = useState(false);\r\n  const [showIngredient14, setShowIngredient14] = useState(false);\r\n  const [showIngredient15, setShowIngredient15] = useState(false);\r\n  const [showIngredient16, setShowIngredient16] = useState(false);\r\n  const [showIngredient17, setShowIngredient17] = useState(false);\r\n  const [showIngredient18, setShowIngredient18] = useState(false);\r\n  const [showIngredient19, setShowIngredient19] = useState(false);\r\n  const [showIngredient20, setShowIngredient20] = useState(false);\r\n  const [showIngredient21, setShowIngredient21] = useState(false);\r\n  const [showIngredient22, setShowIngredient22] = useState(false);\r\n  const [showIngredient23, setShowIngredient23] = useState(false);\r\n  const [showIngredient24, setShowIngredient24] = useState(false);\r\n  const [showIngredient25, setShowIngredient25] = useState(false);\r\n  const [showIngredient26, setShowIngredient26] = useState(false);\r\n\r\n  const [showInstruction4, setShowInstruction4] = useState(false);\r\n  const [showInstruction5, setShowInstruction5] = useState(false);\r\n  const [showInstruction6, setShowInstruction6] = useState(false);\r\n  const [showInstruction7, setShowInstruction7] = useState(false);\r\n  const [showInstruction8, setShowInstruction8] = useState(false);\r\n  const [showInstruction9, setShowInstruction9] = useState(false);\r\n  const [showInstruction10, setShowInstruction10] = useState(false);\r\n  const [showInstruction11, setShowInstruction11] = useState(false);\r\n  const [showInstruction12, setShowInstruction12] = useState(false);\r\n  const [showInstruction13, setShowInstruction13] = useState(false);\r\n  const [showInstruction14, setShowInstruction14] = useState(false);\r\n  const [showInstruction15, setShowInstruction15] = useState(false);\r\n  const [showInstruction16, setShowInstruction16] = useState(false);\r\n  const [showInstruction17, setShowInstruction17] = useState(false);\r\n  const [showInstruction18, setShowInstruction18] = useState(false);\r\n  const [showInstruction19, setShowInstruction19] = useState(false);\r\n  const [showInstruction20, setShowInstruction20] = useState(false);\r\n  const [showInstruction21, setShowInstruction21] = useState(false);\r\n  const [showInstruction22, setShowInstruction22] = useState(false);\r\n  const [showInstruction23, setShowInstruction23] = useState(false);\r\n  const [showInstruction24, setShowInstruction24] = useState(false);\r\n  const [showInstruction25, setShowInstruction25] = useState(false);\r\n  const [showInstruction26, setShowInstruction26] = useState(false);\r\n\r\n  const { loadingCatg, categoryAdd, errorCatg, success } = useSelector(state => state.addCategory);\r\n  const { user } = useSelector((state) => state.userSignin);\r\n  const { loadingAdd, recipe, errorAdd, successAdd } = useSelector(state => state.addRecipe);\r\n  const { loadingUpdt, recipeUpdt, errorUpdt, successUpdt } = useSelector(state => state.recipeUpdate);\r\n  const { loadingDel, errorDel, successDel } = useSelector(state => state.recipeDelete);\r\n  const { loading, error } = useSelector(state => state.recipeListAll);\r\n\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const recipeBy = user.name;\r\n\r\n  const handleRecipeList = useCallback(\r\n    (pageIndex = 1) => {\r\n      dispatch(rbook.recipe.listAllRecipes(pageIndex, pageSize, searchKeyword))\r\n        .then((data) => {\r\n          if (data) {\r\n            setRecipeList(data.docs);\r\n            setPageDetails({\r\n              pageIndex: data.page,\r\n              pageSize: data.limit,\r\n              totalPages: data.totalPages,\r\n              totalDocs: data.totalDocs\r\n            });\r\n          }\r\n        })\r\n    },\r\n    [dispatch, pageSize, searchKeyword],\r\n  );\r\n\r\n  const submitHandlerForSearch = (e) => {\r\n    e.preventDefault();\r\n    dispatch(rbook.recipe.listAllRecipes(searchKeyword));\r\n  };\r\n\r\n  const handleCategoryList = useCallback(\r\n    () => {\r\n      dispatch(rbook.category.listCategories())\r\n        .then((data) => {\r\n          if (data) {\r\n            setCategList(data);\r\n          }\r\n        })\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (categoryAdd) {\r\n      //\r\n    }\r\n    return () => {\r\n      //\r\n    };\r\n  }, [categoryAdd]);\r\n\r\n  useEffect(() => {\r\n    if (recipe) {\r\n      //\r\n    }\r\n    return () => {\r\n      //\r\n    };\r\n  }, [recipe]);\r\n\r\n  useEffect(() => {\r\n   handleCategoryList();\r\n  }, [handleCategoryList]);\r\n\r\n  useEffect(() => {\r\n    handleRecipeList();\r\n  }, [handleRecipeList]);\r\n\r\n  const handleChangePageIndex = (event, value) => {\r\n    handleRecipeList(value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const payload = { name, photo }\r\n    dispatch(rbook.category.addCategory(payload)).then((data) => {\r\n      if (data) {\r\n        handleCategoryList();\r\n      }\r\n    });\r\n    setOpenSnackBar(true);\r\n    setOpenModalCategory(false);\r\n  }\r\n\r\n  const submitHandlerForRecipe = (event) => {\r\n    event.preventDefault();\r\n    const payload = {\r\n      name,\r\n      description,\r\n      category,\r\n      recipeBy,\r\n      ingredients,\r\n      ingredients1,\r\n      ingredients2,\r\n      ingredients3,\r\n      ingredients4,\r\n      ingredients5,\r\n      ingredients6,\r\n      ingredients7,\r\n      ingredients8,\r\n      ingredients9,\r\n      ingredients10,\r\n      ingredients11,\r\n      ingredients12,\r\n      ingredients13,\r\n      ingredients14,\r\n      ingredients15,\r\n      ingredients16,\r\n      ingredients17,\r\n      ingredients18,\r\n      ingredients19,\r\n      ingredients20,\r\n      ingredients21,\r\n      ingredients22,\r\n      ingredients23,\r\n      ingredients24,\r\n      ingredients25,\r\n      instruction,\r\n      instruction1,\r\n      instruction2,\r\n      instruction3,\r\n      instruction4,\r\n      instruction5,\r\n      instruction6,\r\n      instruction7,\r\n      instruction8,\r\n      instruction9,\r\n      instruction10,\r\n      instruction11,\r\n      instruction12,\r\n      instruction13,\r\n      instruction14,\r\n      instruction15,\r\n      instruction16,\r\n      instruction17,\r\n      instruction18,\r\n      instruction19,\r\n      instruction20,\r\n      instruction21,\r\n      instruction22,\r\n      instruction23,\r\n      instruction24,\r\n      instruction25,\r\n      photo,\r\n      photo1\r\n    }\r\n    dispatch(rbook.recipe.addRecipe(payload)).then((data) => {\r\n      if (data) {\r\n        handleRecipeList();\r\n      }\r\n    });\r\n    setOpenSnackBarForAdd(true);\r\n    setOpenModalRecipe(false);\r\n  }\r\n\r\n  const submitHandlerForRecipeUpdate = (event) => {\r\n    event.preventDefault();\r\n    const payload = {\r\n      id,\r\n      name,\r\n      description,\r\n      category,\r\n      recipeBy,\r\n      ingredients,\r\n      ingredients1,\r\n      ingredients2,\r\n      ingredients3,\r\n      ingredients4,\r\n      ingredients5,\r\n      ingredients6,\r\n      ingredients7,\r\n      ingredients8,\r\n      ingredients9,\r\n      ingredients10,\r\n      ingredients11,\r\n      ingredients12,\r\n      ingredients13,\r\n      ingredients14,\r\n      ingredients15,\r\n      ingredients16,\r\n      ingredients17,\r\n      ingredients18,\r\n      ingredients19,\r\n      ingredients20,\r\n      ingredients21,\r\n      ingredients22,\r\n      ingredients23,\r\n      ingredients24,\r\n      ingredients25,\r\n      instruction,\r\n      instruction1,\r\n      instruction2,\r\n      instruction3,\r\n      instruction4,\r\n      instruction5,\r\n      instruction6,\r\n      instruction7,\r\n      instruction8,\r\n      instruction9,\r\n      instruction10,\r\n      instruction11,\r\n      instruction12,\r\n      instruction13,\r\n      instruction14,\r\n      instruction15,\r\n      instruction16,\r\n      instruction17,\r\n      instruction18,\r\n      instruction19,\r\n      instruction20,\r\n      instruction21,\r\n      instruction22,\r\n      instruction23,\r\n      instruction24,\r\n      instruction25,\r\n      photo,\r\n      photo1\r\n    }\r\n    dispatch(rbook.recipe.updateRecipe(payload)).then((data) => {\r\n      if (data) {\r\n        handleRecipeList();\r\n      }\r\n    });\r\n    setOpenSnackBarForUpdt(true);\r\n    setOpenModalRecipeUpdate(false);\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n    setOpenSnackBarForDel(false);\r\n    setOpenSnackBarForAdd(false);\r\n    setOpenSnackBarForUpdt(false);\r\n  };\r\n\r\n\r\n  //modal for add category\r\n  const handleOpenModalCategory = () => {\r\n    setOpenModalCategory(true);\r\n  };\r\n\r\n  const handleCloseModalCategory = () => {\r\n    setOpenModalCategory(false);\r\n  };\r\n\r\n  //modal for add recipe\r\n  const handleOpenModalRecipe = () => {\r\n    setOpenModalRecipe(true);\r\n  };\r\n\r\n  const handleCloseModalRecipe = () => {\r\n    setOpenModalRecipe(false);\r\n  };\r\n\r\n  //modal for recipeList\r\n  const handleOpenModalRecipeList = () => {\r\n    setOpenModalRecipeList(true);\r\n  };\r\n\r\n  //modal for recipe edit Modal\r\n  const handleOpenModalRecipeUpdate = (recipe) => {\r\n    setOpenModalRecipeUpdate(true);\r\n    setId(recipe._id);\r\n    setName(recipe.name);\r\n    setDescription(recipe.description);\r\n    setCategory(recipe.category);\r\n    setIngredients(recipe.ingredients);\r\n    setIngredients1(recipe.ingredients1);\r\n    setIngredients2(recipe.ingredients2);\r\n    setIngredients3(recipe.ingredients3);\r\n    setIngredients4(recipe.ingredients4);\r\n    setIngredients5(recipe.ingredients5);\r\n    setIngredients6(recipe.ingredients6);\r\n    setIngredients7(recipe.ingredients7);\r\n    setIngredients8(recipe.ingredients8);\r\n    setIngredients9(recipe.ingredients9);\r\n    setIngredients10(recipe.ingredients10);\r\n    setIngredients11(recipe.ingredients11);\r\n    setIngredients12(recipe.ingredients12);\r\n    setIngredients13(recipe.ingredients13);\r\n    setIngredients14(recipe.ingredients14);\r\n    setIngredients15(recipe.ingredients15);\r\n    setIngredients16(recipe.ingredients16);\r\n    setIngredients17(recipe.ingredients17);\r\n    setIngredients18(recipe.ingredients18);\r\n    setIngredients19(recipe.ingredients19);\r\n    setIngredients20(recipe.ingredients20);\r\n    setIngredients21(recipe.ingredients21);\r\n    setIngredients22(recipe.ingredients22);\r\n    setIngredients23(recipe.ingredients23);\r\n    setIngredients24(recipe.ingredients24);\r\n    setIngredients25(recipe.ingredients25);\r\n    setInstruction(recipe.instruction);\r\n    setInstruction1(recipe.instruction1);\r\n    setInstruction2(recipe.instruction2);\r\n    setInstruction3(recipe.instruction3);\r\n    setInstruction4(recipe.instruction4);\r\n    setInstruction5(recipe.instruction5);\r\n    setInstruction6(recipe.instruction6);\r\n    setInstruction7(recipe.instruction7);\r\n    setInstruction8(recipe.instruction8);\r\n    setInstruction9(recipe.instruction9);\r\n    setInstruction10(recipe.instruction10);\r\n    setInstruction11(recipe.instruction11);\r\n    setInstruction12(recipe.instruction12);\r\n    setInstruction13(recipe.instruction13);\r\n    setInstruction14(recipe.instruction14);\r\n    setInstruction15(recipe.instruction15);\r\n    setInstruction16(recipe.instruction16);\r\n    setInstruction17(recipe.instruction17);\r\n    setInstruction18(recipe.instruction18);\r\n    setInstruction19(recipe.instruction18);\r\n    setInstruction20(recipe.instruction20);\r\n    setInstruction21(recipe.instruction21);\r\n    setInstruction22(recipe.instruction22);\r\n    setInstruction23(recipe.instruction23);\r\n    setInstruction24(recipe.instruction24);\r\n    setInstruction25(recipe.instruction25);\r\n    setPhoto(recipe.photo);\r\n    setPhoto1(recipe.photo1);\r\n  };\r\n\r\n  const handleCloseModalRecipeUpdate = () => {\r\n    setOpenModalRecipeUpdate(false);\r\n  };\r\n\r\n  const handleCloseModalRecipeList = () => {\r\n    setOpenModalRecipeList(false);\r\n    setSearchKeyword('');\r\n  };\r\n\r\n  const handleDelete = (recipe) => {\r\n    dispatch(rbook.recipe.deleteRecipe(recipe._id)).then((data) => {\r\n      if (data) {\r\n        handleRecipeList();\r\n      }\r\n    });\r\n    setOpenSnackBarForDel(true);\r\n  }\r\n\r\n  const createBanana = (recipe, idx) => {\r\n    if ( lowReso ) {\r\n      return (\r\n        <TableBody style = {{ display: loading || loadingDel && 'none'}} key={idx}>\r\n          <TableCell onClick={() => handleOpenModalRecipeUpdate(recipe)} ><div className={classes.tableCell1}>{recipe.name}</div></TableCell>\r\n          <TableCell><div className={classes.tableCell1}><DeleteIcon onClick={() => handleDelete(recipe)} color=\"secondary\"/></div></TableCell>\r\n        </TableBody>\r\n      );\r\n    } else {\r\n      return (\r\n        <TableBody style = {{ display: loading || loadingDel && 'none'}} key={idx}>\r\n          <TableCell><div className={classes.tableCell}>{recipe._id}</div></TableCell>\r\n          <TableCell><div className={classes.tableCell}>{recipe.name}</div></TableCell>\r\n          <TableCell><div className={classes.tableCell}>{recipe.rating.toFixed(1)}</div></TableCell>\r\n          <TableCell><div className={classes.tableCell}>{recipe.recipeBy}</div></TableCell>\r\n          <TableCell><EditIcon onClick={() => handleOpenModalRecipeUpdate(recipe)} color=\"primary\"/></TableCell>\r\n          <TableCell><DeleteIcon onClick={() => handleDelete(recipe)} color=\"secondary\"/></TableCell>\r\n        </TableBody>\r\n      );\r\n    }\r\n\r\n  };\r\n\r\n  const showError = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{errorCatg}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccess= () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBar} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{category && category.name}category created!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccessDelete = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForDel} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">Recipe Deleted!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showErrorForAddRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForAdd} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{errorAdd}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccessForAddRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForAdd} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{recipe && recipe.name} added in recipes!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showErrorForUpdateRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForUpdt} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"error\">{errorUpdt}</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const showSuccessForUpdateRecipe = () => (\r\n    <Snackbar anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }} open={openSnackBarForUpdt} autoHideDuration={2000} onClose={handleClose}>\r\n      <Alert severity=\"success\">{recipeUpdt && recipeUpdt.name} updated!</Alert>\r\n    </Snackbar>\r\n  );\r\n\r\n  const handleShowIngredient4 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient4(false);\r\n    } else {\r\n      setShowIngredient4(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient5 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient5(false);\r\n    } else {\r\n      setShowIngredient5(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient6 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient6(false);\r\n    } else {\r\n      setShowIngredient6(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient7 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient7(false);\r\n    } else {\r\n      setShowIngredient7(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient8 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient8(false);\r\n    } else {\r\n      setShowIngredient8(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient9 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient9(false);\r\n    } else {\r\n      setShowIngredient9(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient10 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient10(false);\r\n    } else {\r\n      setShowIngredient10(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient11 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient11(false);\r\n    } else {\r\n      setShowIngredient11(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient12 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient12(false);\r\n    } else {\r\n      setShowIngredient12(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient13 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient13(false);\r\n    } else {\r\n      setShowIngredient13(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient14 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient14(false);\r\n    } else {\r\n      setShowIngredient14(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient15 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient15(false);\r\n    } else {\r\n      setShowIngredient15(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient16 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient16(false);\r\n    } else {\r\n      setShowIngredient16(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient17 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient17(false);\r\n    } else {\r\n      setShowIngredient17(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient18 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient18(false);\r\n    } else {\r\n      setShowIngredient18(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient19 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient19(false);\r\n    } else {\r\n      setShowIngredient19(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient20 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient20(false);\r\n    } else {\r\n      setShowIngredient20(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient21 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient21(false);\r\n    } else {\r\n      setShowIngredient21(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient22 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient22(false);\r\n    } else {\r\n      setShowIngredient22(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient23 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient23(false);\r\n    } else {\r\n      setShowIngredient23(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient24 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient24(false);\r\n    } else {\r\n      setShowIngredient24(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient25 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient25(false);\r\n    } else {\r\n      setShowIngredient25(true);\r\n    }\r\n  };\r\n\r\n  const handleShowIngredient26 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowIngredient26(false);\r\n    } else {\r\n      setShowIngredient26(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction4 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction4(false);\r\n    } else {\r\n      setShowInstruction4(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction5 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction5(false);\r\n    } else {\r\n      setShowInstruction5(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction6 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction6(false);\r\n    } else {\r\n      setShowInstruction6(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction7 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction7(false);\r\n    } else {\r\n      setShowInstruction7(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction8 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction8(false);\r\n    } else {\r\n      setShowInstruction8(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction9 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction9(false);\r\n    } else {\r\n      setShowInstruction9(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction10 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction10(false);\r\n    } else {\r\n      setShowInstruction10(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction11 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction11(false);\r\n    } else {\r\n      setShowInstruction11(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction12 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction12(false);\r\n    } else {\r\n      setShowInstruction12(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction13 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction13(false);\r\n    } else {\r\n      setShowInstruction13(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction14 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction14(false);\r\n    } else {\r\n      setShowInstruction14(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction15 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction15(false);\r\n    } else {\r\n      setShowInstruction15(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction16 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction16(false);\r\n    } else {\r\n      setShowInstruction16(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction17 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction17(false);\r\n    } else {\r\n      setShowInstruction17(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction18 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction18(false);\r\n    } else {\r\n      setShowInstruction18(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction19 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction19(false);\r\n    } else {\r\n      setShowInstruction19(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction20 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction20(false);\r\n    } else {\r\n      setShowInstruction20(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction21 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction21(false);\r\n    } else {\r\n      setShowInstruction21(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction22 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction22(false);\r\n    } else {\r\n      setShowInstruction22(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction23 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction23(false);\r\n    } else {\r\n      setShowInstruction23(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction24 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction24(false);\r\n    } else {\r\n      setShowInstruction24(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction25 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction25(false);\r\n    } else {\r\n      setShowInstruction25(true);\r\n    }\r\n  };\r\n\r\n  const handleShowInstruction26 = (event) => {\r\n    if (event.target.value === '') {\r\n      setShowInstruction26(false);\r\n    } else {\r\n      setShowInstruction26(true);\r\n    }\r\n  };\r\n\r\n\r\n  document.title = 'Recipebook | Adminpage';\r\n\r\n  return (\r\n    loadingUpdt || loadingDel || loadingCatg || loadingAdd ? <center className='loading1' ><CircularProgress color = 'inherit' /></center> :\r\n    <>\r\n      {successDel && !errorDel && showSuccessDelete()}\r\n      {success && !errorCatg && showSuccess()}\r\n      {!success && errorCatg && showError()}\r\n      {successAdd && !errorAdd && showSuccessForAddRecipe()}\r\n      {!successAdd && errorAdd && showErrorForAddRecipe()}\r\n      {successUpdt && !errorUpdt && showSuccessForUpdateRecipe()}\r\n      {!successUpdt && errorUpdt && showErrorForUpdateRecipe()}\r\n      <div style = {{ fontSize: 20 }}>\r\n        <center className = 'adminPageTitle'>\r\n          Admin Profile\r\n        </center>\r\n        <center style = {{marginTop: '1rem'}}>\r\n          Admin Id: <div style = {{ color:'red'}}>{user._id}</div>\r\n        </center>\r\n        <center style = {{marginTop: '1rem'}}>\r\n          Admin Name: <div style = {{ color:'red'}}>{user.name}</div>\r\n        </center>\r\n        <center style = {{marginTop: '1rem'}}>\r\n          Admin Email: <div style = {{ color:'red'}}>{user.email}</div>\r\n        </center>\r\n      </div>\r\n      <center style = {{marginTop: '1rem'}}>\r\n        <Button onClick={handleOpenModalCategory} startIcon={<AddIcon/>} variant=\"contained\" type=\"submit\">Add Category</Button>\r\n      </center>\r\n      <center style = {{marginTop: '1rem'}}>\r\n        <Button onClick={handleOpenModalRecipe} startIcon={<AddIcon/>} variant=\"contained\" type=\"submit\">Add Recipe</Button>\r\n      </center>\r\n      <center style = {{marginTop: '1rem'}}>\r\n        <Button onClick={handleOpenModalRecipeList} startIcon={<ListIcon/>} variant=\"contained\" type=\"submit\">Recipe List</Button>\r\n      </center>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={openModalCategory}\r\n        onClose={handleCloseModalCategory}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n     >\r\n       <Fade in={openModalCategory}>\r\n         <div className={classes.paper}>\r\n           <div  className = 'container'>\r\n             <form onSubmit = {submitHandler} className = 'form-container'>\r\n               <FormControl className={(classes.margin, classes.textField)}>\r\n                 <InputLabel>Name of category</InputLabel>\r\n                 <Input\r\n                   type = \"text\"\r\n                   onChange={(e) => setName(e.target.value)}\r\n                   style = {{width: '100%'}}\r\n                   required\r\n                   label=\"category\"\r\n                   id = 'name'\r\n                   name = 'name'\r\n                 />\r\n               </FormControl>\r\n               <div className={classes.root}>\r\n                 <input\r\n                   accept=\"image/*\"\r\n                   className={classes.input}\r\n                   id=\"photo\"\r\n                   required\r\n                   type=\"file\"\r\n                   name = 'photo'\r\n                   onChange={(e) => setPhoto(e.target.files[0])}\r\n                 />\r\n                 <label className=\"addButtons\" htmlFor=\"photo\">\r\n                   <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                     Upload Category Photo\r\n                   </Button>\r\n                 </label>\r\n               </div>\r\n               <Button style={{width:'100%', marginTop: \"1rem\"}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Category</Button>\r\n               <Button onClick={handleCloseModalCategory} style={{width:'100%', marginTop: \"1rem\"}} color=\"primary\" startIcon={<ClearIcon/>} variant=\"contained\">Cancel</Button>\r\n             </form>\r\n           </div>\r\n         </div>\r\n       </Fade>\r\n     </Modal>\r\n     <Modal\r\n       aria-labelledby=\"transition-modal-title\"\r\n       aria-describedby=\"transition-modal-description\"\r\n       className={classes.modal}\r\n       open={openModalRecipeList}\r\n       onClose={handleCloseModalRecipeList}\r\n       closeAfterTransition\r\n       BackdropComponent={Backdrop}\r\n       BackdropProps={{\r\n         timeout: 500,\r\n       }}\r\n    >\r\n      <Fade in={openModalRecipeList}>\r\n        <div className={ lowReso? classes.paper2LowReso : classes.paper2 }>\r\n          <div>\r\n          {loading && <center><CircularProgress color='inherit' className = 'loading1' /></center>}\r\n          {loadingDel && <center><CircularProgress color='inherit' className = 'loading1' /></center>}\r\n          {error && <div>{error}</div>}\r\n          <ClearIcon onClick={handleCloseModalRecipeList} />\r\n          <form style = {{ marginTop: '3%', marginBottom: '3%' }} onSubmit={submitHandlerForSearch}>\r\n            <TextField\r\n              placeholder = 'Search for recipes?'\r\n              className = 'searchBar'\r\n              id=\"outlined-search\"\r\n              style = {{ display: loadingUpdt && 'none' }}\r\n              type=\"search\"\r\n              variant=\"outlined\"\r\n              name=\"searchKeyword\"\r\n              value={searchKeyword}\r\n              onChange={(e) => setSearchKeyword(e.target.value)}\r\n            />\r\n          </form>\r\n          { lowReso ?\r\n            <TableContainer style = {{ display: loading && 'none' }} component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow style={{ marginTop:\"1rem\" }} >\r\n                    <TableCell><div className={classes.tableCell1}>Name</div></TableCell>\r\n                    <TableCell><div className={classes.tableCell1}>Delete</div></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                {recipeList.map((recipe, index) => (\r\n                  createBanana(recipe, index)\r\n                ))}\r\n              </Table>\r\n            </TableContainer>\r\n          :\r\n          <TableContainer style = {{ display: loading && 'none' }} component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow style={{ marginTop:\"1rem\" }} >\r\n                  <TableCell>ID</TableCell>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Rating</TableCell>\r\n                  <TableCell>Author</TableCell>\r\n                  <TableCell>Edit</TableCell>\r\n                  <TableCell>Delete</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              {recipeList.map((recipe, index) => (\r\n                createBanana(recipe, index)\r\n              ))}\r\n            </Table>\r\n          </TableContainer>\r\n          }\r\n\r\n          <Pagination\r\n            style = {{ display: loading && 'none', marginTop: \"1rem\" }}\r\n            count={pageDetails && pageDetails.totalPages}\r\n            page={pageDetails && pageDetails.pageIndex}\r\n            defaultPage={1}\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onChange={handleChangePageIndex}\r\n            classes={{ ul: classes.paginator }}\r\n          />\r\n          <Modal\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            className={classes.modal}\r\n            open={openModalRecipeUpdate}\r\n            onClose={handleCloseModalRecipeUpdate}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n              timeout: 500,\r\n            }}\r\n         >\r\n           <Fade in={openModalRecipeUpdate}>\r\n             <div className={classes.paper1}>\r\n               <div className = 'container'>\r\n                 <form onSubmit = {submitHandlerForRecipeUpdate} className = 'form-container'>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Name of the recipe</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={name}\r\n                       onChange={(e) => setName(e.target.value)}\r\n                       required\r\n                       id = 'name'\r\n                       name = 'name'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <TextField\r\n                       id=\"description\"\r\n                       label=\"Description\"\r\n                       value={description}\r\n                       multiline\r\n                       name=\"description\"\r\n                       onChange={(e) => setDescription(e.target.value)}\r\n                       variant=\"outlined\"\r\n                       rows={4}\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl required className={(classes.margin, classes.textField)}>\r\n                     <Select\r\n                       native\r\n                       required\r\n                       variant=\"outlined\"\r\n                       onChange={(e) => setCategory(e.target.value)}\r\n                       value={category}\r\n                       inputProps={{\r\n                         name: 'category',\r\n                         id: 'category',\r\n                       }}\r\n                     >\r\n                       <option value = \"\">Select Category</option>\r\n                       {\r\n                        categList.map((c, i) => (\r\n                          <option key={i} value={c._id}>\r\n                              {c.name}\r\n                          </option>\r\n                       ))}\r\n                     </Select>\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 1 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients}\r\n                       onChange={(e) => setIngredients(e.target.value)}\r\n                       required\r\n                       id = 'ingredients'\r\n                       name = 'ingredients'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 2 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients1}\r\n                       onChange={(e) => setIngredients1(e.target.value)}\r\n                       required\r\n                       id = 'ingredients1'\r\n                       name = 'ingredients1'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 3 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients2}\r\n                       onChange={(e) => setIngredients2(e.target.value)}\r\n                       required\r\n                       id = 'ingredients2'\r\n                       name = 'ingredients2'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 4 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients3}\r\n                       onChange={(e) => setIngredients3(e.target.value)}\r\n                       id = 'ingredients3'\r\n                       name = 'ingredients3'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 5 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients4}\r\n                       onChange={(e) => setIngredients4(e.target.value)}\r\n                       id = 'ingredients4'\r\n                       name = 'ingredients4'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 6 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients5}\r\n                       onChange={(e) => setIngredients5(e.target.value)}\r\n                       id = 'ingredients5'\r\n                       name = 'ingredients5'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 7 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients6}\r\n                       onChange={(e) => setIngredients6(e.target.value)}\r\n                       id = 'ingredients6'\r\n                       name = 'ingredients6'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 8 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients7}\r\n                       onChange={(e) => setIngredients7(e.target.value)}\r\n                       id = 'ingredients7'\r\n                       name = 'ingredients7'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 9 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients8}\r\n                       onChange={(e) => setIngredients8(e.target.value)}\r\n                       id = 'ingredients8'\r\n                       name = 'ingredients8'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 10 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients9}\r\n                       onChange={(e) => setIngredients9(e.target.value)}\r\n                       id = 'ingredients9'\r\n                       name = 'ingredients9'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 11 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients10}\r\n                       onChange={(e) => setIngredients10(e.target.value)}\r\n                       id = 'ingredients10'\r\n                       name = 'ingredients10'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 12 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients11}\r\n                       onChange={(e) => setIngredients11(e.target.value)}\r\n                       id = 'ingredients11'\r\n                       name = 'ingredients11'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 13 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients12}\r\n                       onChange={(e) => setIngredients12(e.target.value)}\r\n                       id = 'ingredients12'\r\n                       name = 'ingredients12'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 14 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients13}\r\n                       onChange={(e) => setIngredients13(e.target.value)}\r\n                       id = 'ingredients13'\r\n                       name = 'ingredients13'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 15 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients14}\r\n                       onChange={(e) => setIngredients14(e.target.value)}\r\n                       id = 'ingredients14'\r\n                       name = 'ingredients14'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 16 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients15}\r\n                       onChange={(e) => setIngredients15(e.target.value)}\r\n                       id = 'ingredients15'\r\n                       name = 'ingredients15'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 17 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients16}\r\n                       onChange={(e) => setIngredients16(e.target.value)}\r\n                       id = 'ingredients16'\r\n                       name = 'ingredients16'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 18 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients17}\r\n                       onChange={(e) => setIngredients17(e.target.value)}\r\n                       id = 'ingredients17'\r\n                       name = 'ingredients17'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 19 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients18}\r\n                       onChange={(e) => setIngredients18(e.target.value)}\r\n                       id = 'ingredients18'\r\n                       name = 'ingredients18'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 20 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients19}\r\n                       onChange={(e) => setIngredients19(e.target.value)}\r\n                       id = 'ingredients19'\r\n                       name = 'ingredients19'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 21 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients20}\r\n                       onChange={(e) => setIngredients20(e.target.value)}\r\n                       id = 'ingredients20'\r\n                       name = 'ingredients20'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 22 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients21}\r\n                       onChange={(e) => setIngredients21(e.target.value)}\r\n                       id = 'ingredients21'\r\n                       name = 'ingredients21'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 23 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients22}\r\n                       onChange={(e) => setIngredients22(e.target.value)}\r\n                       id = 'ingredients22'\r\n                       name = 'ingredients22'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 24 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients23}\r\n                       onChange={(e) => setIngredients23(e.target.value)}\r\n                       id = 'ingredients23'\r\n                       name = 'ingredients23'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 25 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients24}\r\n                       onChange={(e) => setIngredients24(e.target.value)}\r\n                       id = 'ingredients24'\r\n                       name = 'ingredients24'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Ingredient 26 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={ingredients25}\r\n                       onChange={(e) => setIngredients25(e.target.value)}\r\n                       id = 'ingredients25'\r\n                       name = 'ingredients25'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 1 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction}\r\n                       onChange={(e) => setInstruction(e.target.value)}\r\n                       required\r\n                       id = 'instruction'\r\n                       name = 'instruction'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 2 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction1}\r\n                       onChange={(e) => setInstruction1(e.target.value)}\r\n                       required\r\n                       id = 'instruction1'\r\n                       name = 'instruction1'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 3 (required)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction2}\r\n                       onChange={(e) => setInstruction2(e.target.value)}\r\n                       required\r\n                       id = 'instruction2'\r\n                       name = 'instruction2'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 4 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction3}\r\n                       onChange={(e) => setInstruction3(e.target.value)}\r\n                       id = 'instruction3'\r\n                       name = 'instruction3'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 5 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction4}\r\n                       onChange={(e) => setInstruction4(e.target.value)}\r\n                       id = 'instruction4'\r\n                       name = 'instruction4'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 6 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction5}\r\n                       onChange={(e) => setInstruction5(e.target.value)}\r\n                       id = 'instruction5'\r\n                       name = 'instruction5'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 7 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction6}\r\n                       onChange={(e) => setInstruction6(e.target.value)}\r\n                       id = 'instruction6'\r\n                       name = 'instruction6'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 8 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction7}\r\n                       onChange={(e) => setInstruction7(e.target.value)}\r\n                       id = 'instruction7'\r\n                       name = 'instruction7'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 9 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction8}\r\n                       onChange={(e) => setInstruction8(e.target.value)}\r\n                       id = 'instruction8'\r\n                       name = 'instruction8'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 10 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction9}\r\n                       onChange={(e) => setInstruction9(e.target.value)}\r\n                       id = 'instruction9'\r\n                       name = 'instruction9'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 11 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction10}\r\n                       onChange={(e) => setInstruction10(e.target.value)}\r\n                       id = 'instruction10'\r\n                       name = 'instruction10'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 12 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction11}\r\n                       onChange={(e) => setInstruction11(e.target.value)}\r\n                       id = 'instruction11'\r\n                       name = 'instruction11'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 13 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction12}\r\n                       onChange={(e) => setInstruction12(e.target.value)}\r\n                       id = 'instruction12'\r\n                       name = 'instruction12'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 14 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction13}\r\n                       onChange={(e) => setInstruction13(e.target.value)}\r\n                       id = 'instruction13'\r\n                       name = 'instruction13'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 15 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction14}\r\n                       onChange={(e) => setInstruction14(e.target.value)}\r\n                       id = 'instruction14'\r\n                       name = 'instruction14'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 16 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction15}\r\n                       onChange={(e) => setInstruction15(e.target.value)}\r\n                       id = 'instruction15'\r\n                       name = 'instruction15'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 17 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction16}\r\n                       onChange={(e) => setInstruction16(e.target.value)}\r\n                       id = 'instruction16'\r\n                       name = 'instruction16'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 18 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction17}\r\n                       onChange={(e) => setInstruction17(e.target.value)}\r\n                       id = 'instruction17'\r\n                       name = 'instruction17'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 19 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction18}\r\n                       onChange={(e) => setInstruction18(e.target.value)}\r\n                       id = 'instruction18'\r\n                       name = 'instruction18'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 20 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction19}\r\n                       onChange={(e) => setInstruction19(e.target.value)}\r\n                       id = 'instruction19'\r\n                       name = 'instruction19'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 21 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction20}\r\n                       onChange={(e) => setInstruction20(e.target.value)}\r\n                       id = 'instruction20'\r\n                       name = 'instruction20'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 22 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction21}\r\n                       onChange={(e) => setInstruction21(e.target.value)}\r\n                       id = 'instruction21'\r\n                       name = 'instruction21'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 23 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction22}\r\n                       onChange={(e) => setInstruction22(e.target.value)}\r\n                       id = 'instruction22'\r\n                       name = 'instruction22'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 24 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction23}\r\n                       onChange={(e) => setInstruction23(e.target.value)}\r\n                       id = 'instruction23'\r\n                       name = 'instruction23'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 25 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction24}\r\n                       onChange={(e) => setInstruction24(e.target.value)}\r\n                       id = 'instruction24'\r\n                       name = 'instruction24'\r\n                     />\r\n                   </FormControl>\r\n                   <FormControl className={(classes.margin, classes.textField)}>\r\n                     <InputLabel color=\"primary\">Instruction 26 (unneed)</InputLabel>\r\n                     <Input\r\n                       type = \"text\"\r\n                       value={instruction25}\r\n                       onChange={(e) => setInstruction25(e.target.value)}\r\n                       id = 'instruction25'\r\n                       name = 'instruction25'\r\n                     />\r\n                   </FormControl>\r\n                   <div style={{marginTop: \"1rem\"}} className={classes.root}>\r\n                     <input\r\n                       accept=\"image/*\"\r\n                       className={classes.input}\r\n                       id=\"photo\"\r\n                       required\r\n                       type=\"file\"\r\n                       name = 'photo'\r\n                       onChange={(e) => setPhoto(e.target.files[0])}\r\n                     />\r\n                     <label className=\"addButtons\" htmlFor=\"photo\">\r\n                       <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                         Upload Recipe Photo\r\n                       </Button>\r\n                     </label>\r\n                   </div>\r\n                   <div style={{marginTop: \"1rem\"}} className={classes.root}>\r\n                     <input\r\n                       accept=\"image/*\"\r\n                       className={classes.input}\r\n                       id=\"photo1\"\r\n                       required\r\n                       type=\"file\"\r\n                       name = 'photo1'\r\n                       onChange={(e) => setPhoto1(e.target.files[0])}\r\n                     />\r\n                     <label className=\"addButtons\" htmlFor=\"photo1\">\r\n                       <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                         Upload Details Photo\r\n                       </Button>\r\n                     </label>\r\n                   </div>\r\n                   <Button style={{width:'100%', marginTop: \"1rem\"}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Recipe</Button>\r\n                   <Button onClick={handleCloseModalRecipeUpdate} style={{width:'100%', marginTop: \"1rem\"}} color=\"primary\" startIcon={<ClearIcon/>} variant=\"contained\">Cancel</Button>\r\n                 </form>\r\n               </div>\r\n             </div>\r\n           </Fade>\r\n         </Modal>\r\n          </div>\r\n        </div>\r\n      </Fade>\r\n    </Modal>\r\n     <Modal\r\n       aria-labelledby=\"transition-modal-title\"\r\n       aria-describedby=\"transition-modal-description\"\r\n       className={classes.modal}\r\n       open={openModalRecipe}\r\n       onClose={handleCloseModalRecipe}\r\n       closeAfterTransition\r\n       BackdropComponent={Backdrop}\r\n       BackdropProps={{\r\n         timeout: 500,\r\n       }}\r\n    >\r\n      <Fade in={openModalRecipe}>\r\n        <div className={classes.paper1}>\r\n          <div className = 'container'>\r\n            <form onSubmit = {submitHandlerForRecipe} className = 'form-container'>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Name of the recipe</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  required\r\n                  id = 'name'\r\n                  name = 'name'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <TextField\r\n                  id=\"description\"\r\n                  label=\"Description\"\r\n                  multiline\r\n                  name=\"description\"\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  rows={4}\r\n                />\r\n              </FormControl>\r\n              <FormControl required className={(classes.margin, classes.textField)}>\r\n                <Select\r\n                  native\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setCategory(e.target.value)}\r\n                  inputProps={{\r\n                    name: 'category',\r\n                    id: 'category',\r\n                  }}\r\n                >\r\n                  <option value = \"\">Select Category</option>\r\n                  {\r\n                   categList.map((c, i) => (\r\n                     <option key={i} value={c._id}>\r\n                         {c.name}\r\n                     </option>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 1 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients(e.target.value)}\r\n                  required\r\n                  id = 'ingredients'\r\n                  name = 'ingredients'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 2 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients1(e.target.value)}\r\n                  required\r\n                  id = 'ingredients1'\r\n                  name = 'ingredients1'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient4} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 3 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients2(e.target.value)}\r\n                  required\r\n                  id = 'ingredients2'\r\n                  name = 'ingredients2'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient5} hidden={!showIngredient4} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 4 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients3(e.target.value)}\r\n                  id = 'ingredients3'\r\n                  name = 'ingredients3'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient6} hidden={!showIngredient5} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 5 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients4(e.target.value)}\r\n                  id = 'ingredients4'\r\n                  name = 'ingredients4'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient7} hidden={!showIngredient6} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 6 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients5(e.target.value)}\r\n                  id = 'ingredients5'\r\n                  name = 'ingredients5'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient8} hidden={!showIngredient7} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 7 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients6(e.target.value)}\r\n                  id = 'ingredients6'\r\n                  name = 'ingredients6'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient9} hidden={!showIngredient8} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 8 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients7(e.target.value)}\r\n                  id = 'ingredients7'\r\n                  name = 'ingredients7'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient10} hidden={!showIngredient9} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 9 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients8(e.target.value)}\r\n                  id = 'ingredients8'\r\n                  name = 'ingredients8'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient11} hidden={!showIngredient10} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 10 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients9(e.target.value)}\r\n                  id = 'ingredients9'\r\n                  name = 'ingredients9'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient12} hidden={!showIngredient11} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 11 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients10(e.target.value)}\r\n                  id = 'ingredients10'\r\n                  name = 'ingredients10'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient13} hidden={!showIngredient12} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 12 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients11(e.target.value)}\r\n                  id = 'ingredients11'\r\n                  name = 'ingredients11'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient14} hidden={!showIngredient13} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 13 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients12(e.target.value)}\r\n                  id = 'ingredients12'\r\n                  name = 'ingredients12'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient15} hidden={!showIngredient14} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 14 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients13(e.target.value)}\r\n                  id = 'ingredients13'\r\n                  name = 'ingredients13'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient16} hidden={!showIngredient15} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 15 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients14(e.target.value)}\r\n                  id = 'ingredients14'\r\n                  name = 'ingredients14'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient17} hidden={!showIngredient16} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 16 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients15(e.target.value)}\r\n                  id = 'ingredients15'\r\n                  name = 'ingredients15'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient18} hidden={!showIngredient17} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 17 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients16(e.target.value)}\r\n                  id = 'ingredients16'\r\n                  name = 'ingredients16'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient19} hidden={!showIngredient18} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 18 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients17(e.target.value)}\r\n                  id = 'ingredients17'\r\n                  name = 'ingredients17'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient20} hidden={!showIngredient19} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 19 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients18(e.target.value)}\r\n                  id = 'ingredients18'\r\n                  name = 'ingredients18'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient21} hidden={!showIngredient20} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 20 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients19(e.target.value)}\r\n                  id = 'ingredients19'\r\n                  name = 'ingredients19'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient22} hidden={!showIngredient21} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 21 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients20(e.target.value)}\r\n                  id = 'ingredients20'\r\n                  name = 'ingredients20'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient23} hidden={!showIngredient22} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 22 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients21(e.target.value)}\r\n                  id = 'ingredients21'\r\n                  name = 'ingredients21'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient24} hidden={!showIngredient23} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 23 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients22(e.target.value)}\r\n                  id = 'ingredients22'\r\n                  name = 'ingredients22'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient25} hidden={!showIngredient24} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 24 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients23(e.target.value)}\r\n                  id = 'ingredients23'\r\n                  name = 'ingredients23'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowIngredient26} hidden={!showIngredient25} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 25 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients24(e.target.value)}\r\n                  id = 'ingredients24'\r\n                  name = 'ingredients24'\r\n                />\r\n              </FormControl>\r\n              <FormControl hidden={!showIngredient26} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Ingredient 26 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setIngredients25(e.target.value)}\r\n                  id = 'ingredients25'\r\n                  name = 'ingredients25'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 1 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction(e.target.value)}\r\n                  required\r\n                  id = 'instruction'\r\n                  name = 'instruction'\r\n                />\r\n              </FormControl>\r\n              <FormControl className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 2 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction1(e.target.value)}\r\n                  required\r\n                  id = 'instruction1'\r\n                  name = 'instruction1'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction4} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 3 (required)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction2(e.target.value)}\r\n                  required\r\n                  id = 'instruction2'\r\n                  name = 'instruction2'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction5} hidden={!showInstruction4} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 4 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction3(e.target.value)}\r\n                  id = 'instruction3'\r\n                  name = 'instruction3'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction6} hidden={!showInstruction5} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 5 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction4(e.target.value)}\r\n                  id = 'instruction4'\r\n                  name = 'instruction4'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction7} hidden={!showInstruction6} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 6 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction5(e.target.value)}\r\n                  id = 'instruction5'\r\n                  name = 'instruction5'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction8} hidden={!showInstruction7} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 7 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction6(e.target.value)}\r\n                  id = 'instruction6'\r\n                  name = 'instruction6'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction9} hidden={!showInstruction8} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 8 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction7(e.target.value)}\r\n                  id = 'instruction7'\r\n                  name = 'instruction7'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction10} hidden={!showInstruction9} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 9 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction8(e.target.value)}\r\n                  id = 'instruction8'\r\n                  name = 'instruction8'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction11} hidden={!showInstruction10} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 10 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction9(e.target.value)}\r\n                  id = 'instruction9'\r\n                  name = 'instruction9'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction12} hidden={!showInstruction11} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 11 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction10(e.target.value)}\r\n                  id = 'instruction10'\r\n                  name = 'instruction10'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction13} hidden={!showInstruction12} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 12 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction11(e.target.value)}\r\n                  id = 'instruction11'\r\n                  name = 'instruction11'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction14} hidden={!showInstruction13} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 13 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction12(e.target.value)}\r\n                  id = 'instruction12'\r\n                  name = 'instruction12'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction15} hidden={!showInstruction14} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 14 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction13(e.target.value)}\r\n                  id = 'instruction13'\r\n                  name = 'instruction13'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction16} hidden={!showInstruction15} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 15 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction14(e.target.value)}\r\n                  id = 'instruction14'\r\n                  name = 'instruction14'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction17} hidden={!showInstruction16} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 16 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction15(e.target.value)}\r\n                  id = 'instruction15'\r\n                  name = 'instruction15'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction18} hidden={!showInstruction17} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 17 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction16(e.target.value)}\r\n                  id = 'instruction16'\r\n                  name = 'instruction16'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction19} hidden={!showInstruction18} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 18 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction17(e.target.value)}\r\n                  id = 'instruction17'\r\n                  name = 'instruction17'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction20} hidden={!showInstruction19} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 19 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction18(e.target.value)}\r\n                  id = 'instruction18'\r\n                  name = 'instruction18'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction21} hidden={!showInstruction20} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 20 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction19(e.target.value)}\r\n                  id = 'instruction19'\r\n                  name = 'instruction19'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction22} hidden={!showInstruction21} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 21 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction20(e.target.value)}\r\n                  id = 'instruction20'\r\n                  name = 'instruction20'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction23} hidden={!showInstruction22} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 22 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction21(e.target.value)}\r\n                  id = 'instruction21'\r\n                  name = 'instruction21'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction24} hidden={!showInstruction23} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 23 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction22(e.target.value)}\r\n                  id = 'instruction22'\r\n                  name = 'instruction22'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction25} hidden={!showInstruction24} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 24 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction23(e.target.value)}\r\n                  id = 'instruction23'\r\n                  name = 'instruction23'\r\n                />\r\n              </FormControl>\r\n              <FormControl onChange={handleShowInstruction26} hidden={!showInstruction25} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 25 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction24(e.target.value)}\r\n                  id = 'instruction24'\r\n                  name = 'instruction24'\r\n                />\r\n              </FormControl>\r\n              <FormControl hidden={!showInstruction26} className={(classes.margin, classes.textField)}>\r\n                <InputLabel color=\"primary\">Instruction 26 (unneed)</InputLabel>\r\n                <Input\r\n                  type = \"text\"\r\n                  onChange={(e) => setInstruction25(e.target.value)}\r\n                  id = 'instruction25'\r\n                  name = 'instruction25'\r\n                />\r\n              </FormControl>\r\n              <div style={{marginTop: \"1rem\"}} className={classes.root}>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  required\r\n                  className={classes.input}\r\n                  id=\"photo\"\r\n                  type=\"file\"\r\n                  name = 'photo'\r\n                  onChange={(e) => setPhoto(e.target.files[0])}\r\n                />\r\n                <label className=\"addButtons\" htmlFor=\"photo\">\r\n                  <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                    Upload Recipe Photo\r\n                  </Button>\r\n                </label>\r\n              </div>\r\n              <div style={{marginTop: \"1rem\"}} className={classes.root}>\r\n                <input\r\n                accept=\"image/*\"\r\n                required\r\n                className={classes.input}\r\n                id=\"photo1\"\r\n                type=\"file\"\r\n                name = 'photo1'\r\n                onChange={(e) => setPhoto1(e.target.files[0])}\r\n                />\r\n                <label className=\"addButtons\" htmlFor=\"photo1\">\r\n                  <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\r\n                    Upload Details Photo\r\n                  </Button>\r\n                </label>\r\n              </div>\r\n              <Button style={{width:'100%', marginTop: \"1rem\"}} startIcon={<SaveIcon />} variant=\"contained\" type=\"submit\">Save Recipe</Button>\r\n              <Button onClick={handleCloseModalRecipe} style={{width:'100%', marginTop: \"1rem\"}} color=\"primary\" startIcon={<ClearIcon/>} variant=\"contained\">Cancel</Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Fade>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminPage;\r\n","C:\\Users\\pillo\\recipebook\\src\\pages\\allRecipe.js",["136"],"C:\\Users\\pillo\\recipebook\\src\\components\\navbar.js",[],"C:\\Users\\pillo\\recipebook\\src\\components\\footer.js",[],"C:\\Users\\pillo\\recipebook\\src\\components\\navbarLow.js",[],["137","138"],"C:\\Users\\pillo\\recipebook\\src\\pages\\signup.js",[],"C:\\Users\\pillo\\recipebook\\src\\pages\\mainHomepage.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\privateRoute.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\loggedInRoute.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\recipeReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\reducers\\categoryReducers.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\category.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\user.js",[],"C:\\Users\\pillo\\recipebook\\src\\App.js",["139"],"C:\\Users\\pillo\\recipebook\\src\\pages\\home.js",["140"],"C:\\Users\\pillo\\recipebook\\src\\pages\\categsHome.js",[],"C:\\Users\\pillo\\recipebook\\src\\redux\\actions\\index.js",[],"C:\\Users\\pillo\\recipebook\\src\\routes\\adminRoute.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"141","replacedBy":"145"},{"ruleId":"143","replacedBy":"146"},{"ruleId":"141","replacedBy":"147"},{"ruleId":"143","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":73,"column":6,"nodeType":"151","endLine":73,"endColumn":24,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"153","line":53,"column":6,"nodeType":"151","endLine":53,"endColumn":8,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":593,"column":48,"nodeType":"157","messageId":"158","endLine":593,"endColumn":50},{"ruleId":"155","severity":1,"message":"156","line":593,"column":62,"nodeType":"157","messageId":"158","endLine":593,"endColumn":64},{"ruleId":"155","severity":1,"message":"156","line":600,"column":48,"nodeType":"157","messageId":"158","endLine":600,"endColumn":50},{"ruleId":"155","severity":1,"message":"156","line":600,"column":62,"nodeType":"157","messageId":"158","endLine":600,"endColumn":64},{"ruleId":"159","severity":1,"message":"160","line":54,"column":10,"nodeType":"161","messageId":"162","endLine":54,"endColumn":18},{"ruleId":"141","replacedBy":"163"},{"ruleId":"143","replacedBy":"164"},{"ruleId":"159","severity":1,"message":"165","line":25,"column":8,"nodeType":"161","messageId":"162","endLine":25,"endColumn":20},{"ruleId":"149","severity":1,"message":"153","line":54,"column":6,"nodeType":"151","endLine":54,"endColumn":8,"suggestions":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],["167"],["168"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["169"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["170"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-unused-vars","'category' is assigned a value but never used.","Identifier","unusedVar",["167"],["168"],"'PrivateRoute' is defined but never used.",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"174","fix":"176"},"Update the dependencies array to be: [dispatch, props.match.params.id, recipeReviewSave]",{"range":"177","text":"178"},"Update the dependencies array to be: [dispatch]",{"range":"179","text":"180"},{"range":"181","text":"180"},[2212,2230],"[dispatch, props.match.params.id, recipeReviewSave]",[1485,1487],"[dispatch]",[1456,1458]]